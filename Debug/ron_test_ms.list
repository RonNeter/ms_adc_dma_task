
ron_test_ms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08005c54  08005c54  00006c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e70  08005e70  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e70  08005e70  00006e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e78  08005e78  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e78  08005e78  00006e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e7c  08005e7c  00006e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005e80  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          0000034c  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a8  200003a8  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011766  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e5  00000000  00000000  000187f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  0001aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bde  00000000  00000000  0001b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c99  00000000  00000000  0001c5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f2b  00000000  00000000  0003e26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d382a  00000000  00000000  0005119a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001249c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004538  00000000  00000000  00124a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00128f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c3c 	.word	0x08005c3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005c3c 	.word	0x08005c3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <printTitle>:
/**
  * @brief  Print a title message for Ron Neter's Programming Task
  * @retval None
  */
void printTitle(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
  const char* title =
 8000296:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <printTitle+0x28>)
 8000298:	607b      	str	r3, [r7, #4]
    "*        ADC + DMA Sampling System            *\r\n"
    "*                                             *\r\n"
    "***********************************************\r\n"
    "\r\n";

  HAL_UART_Transmit(&huart2, (uint8_t*)title, strlen(title), 200);
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f7ff ffa0 	bl	80001e0 <strlen>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	23c8      	movs	r3, #200	@ 0xc8
 80002a6:	6879      	ldr	r1, [r7, #4]
 80002a8:	4804      	ldr	r0, [pc, #16]	@ (80002bc <printTitle+0x2c>)
 80002aa:	f004 fbad 	bl	8004a08 <HAL_UART_Transmit>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	08005c54 	.word	0x08005c54
 80002bc:	20000158 	.word	0x20000158

080002c0 <ConfigureADCWithDMA_F3>:
/**
  * @brief  Configure ADC with DMA specific to STM32F3 series
  * @retval None
  */
void ConfigureADCWithDMA_F3(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  // Clear ADC configuration
  ADC1->CR &= ~(ADC_CR_ADEN);  // Disable ADC
 80002c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6093      	str	r3, [r2, #8]
  while(ADC1->CR & ADC_CR_ADEN); // Wait until ADC is disabled
 80002d4:	bf00      	nop
 80002d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	f003 0301 	and.w	r3, r3, #1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f8      	bne.n	80002d6 <ConfigureADCWithDMA_F3+0x16>

  // Configure DMA channel
  DMA1_Channel1->CCR &= ~DMA_CCR_EN;  // Disable DMA channel
 80002e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000360 <ConfigureADCWithDMA_F3+0xa0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000360 <ConfigureADCWithDMA_F3+0xa0>)
 80002ea:	f023 0301 	bic.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]
  DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);  // Peripheral address
 80002f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000360 <ConfigureADCWithDMA_F3+0xa0>)
 80002f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000364 <ConfigureADCWithDMA_F3+0xa4>)
 80002f4:	609a      	str	r2, [r3, #8]
  DMA1_Channel1->CMAR = (uint32_t)adc_buffer;   // Memory address
 80002f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000360 <ConfigureADCWithDMA_F3+0xa0>)
 80002f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000368 <ConfigureADCWithDMA_F3+0xa8>)
 80002fa:	60da      	str	r2, [r3, #12]
  DMA1_Channel1->CNDTR = 3;  // 3 data items to transfer
 80002fc:	4b18      	ldr	r3, [pc, #96]	@ (8000360 <ConfigureADCWithDMA_F3+0xa0>)
 80002fe:	2203      	movs	r2, #3
 8000300:	605a      	str	r2, [r3, #4]
  DMA1_Channel1->CCR = DMA_CCR_MINC |  // Memory increment
 8000302:	4b17      	ldr	r3, [pc, #92]	@ (8000360 <ConfigureADCWithDMA_F3+0xa0>)
 8000304:	f640 22a2 	movw	r2, #2722	@ 0xaa2
 8000308:	601a      	str	r2, [r3, #0]
                      DMA_CCR_MSIZE_1 | // Memory size 32 bits
                      DMA_CCR_CIRC |    // Circular mode
                      DMA_CCR_TCIE;     // Transfer complete interrupt

  // Enable DMA
  DMA1_Channel1->CCR |= DMA_CCR_EN;
 800030a:	4b15      	ldr	r3, [pc, #84]	@ (8000360 <ConfigureADCWithDMA_F3+0xa0>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a14      	ldr	r2, [pc, #80]	@ (8000360 <ConfigureADCWithDMA_F3+0xa0>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6013      	str	r3, [r2, #0]

  // Configure ADC for DMA
  ADC1->CFGR |= ADC_CFGR_DMAEN | ADC_CFGR_DMACFG;  // Enable DMA circular mode
 8000316:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000320:	f043 0303 	orr.w	r3, r3, #3
 8000324:	60d3      	str	r3, [r2, #12]

  // Start ADC
  ADC1->CR |= ADC_CR_ADEN;  // Enable ADC
 8000326:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6093      	str	r3, [r2, #8]
  while(!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC ready
 8000336:	bf00      	nop
 8000338:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <ConfigureADCWithDMA_F3+0x78>
  ADC1->CR |= ADC_CR_ADSTART;  // Start conversion
 8000346:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6093      	str	r3, [r2, #8]
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40020008 	.word	0x40020008
 8000364:	50000040 	.word	0x50000040
 8000368:	200001e0 	.word	0x200001e0

0800036c <printDebug>:

/**
  * @brief Send debug message over UART
  */
void printDebug(const char* message) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b09c      	sub	sp, #112	@ 0x70
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  char debug_buffer[100];
  sprintf(debug_buffer, "DEBUG: %s\r\n", message);
 8000374:	f107 030c 	add.w	r3, r7, #12
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	490a      	ldr	r1, [pc, #40]	@ (80003a4 <printDebug+0x38>)
 800037c:	4618      	mov	r0, r3
 800037e:	f004 ffbd 	bl	80052fc <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)debug_buffer, strlen(debug_buffer), 100);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff2a 	bl	80001e0 <strlen>
 800038c:	4603      	mov	r3, r0
 800038e:	b29a      	uxth	r2, r3
 8000390:	f107 010c 	add.w	r1, r7, #12
 8000394:	2364      	movs	r3, #100	@ 0x64
 8000396:	4804      	ldr	r0, [pc, #16]	@ (80003a8 <printDebug+0x3c>)
 8000398:	f004 fb36 	bl	8004a08 <HAL_UART_Transmit>
}
 800039c:	bf00      	nop
 800039e:	3770      	adds	r7, #112	@ 0x70
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	08005d80 	.word	0x08005d80
 80003a8:	20000158 	.word	0x20000158

080003ac <sendSensorData>:
/**
  * @brief  Send sensor data over UART.
  * @retval None
  */
void sendSensorData(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af02      	add	r7, sp, #8
  // Format data with timestamp and all three ADC channel values
  sprintf(uart_tx_buffer, "Time: %lu ms, CH1: %lu, CH2: %lu, CH3: %lu\r\n",
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <sendSensorData+0x40>)
 80003b4:	6819      	ldr	r1, [r3, #0]
          system_timestamp, adc_buffer[0], adc_buffer[1], adc_buffer[2]);
 80003b6:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <sendSensorData+0x44>)
 80003b8:	6818      	ldr	r0, [r3, #0]
 80003ba:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <sendSensorData+0x44>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <sendSensorData+0x44>)
 80003c0:	6892      	ldr	r2, [r2, #8]
  sprintf(uart_tx_buffer, "Time: %lu ms, CH1: %lu, CH2: %lu, CH3: %lu\r\n",
 80003c2:	9201      	str	r2, [sp, #4]
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	4603      	mov	r3, r0
 80003c8:	460a      	mov	r2, r1
 80003ca:	490a      	ldr	r1, [pc, #40]	@ (80003f4 <sendSensorData+0x48>)
 80003cc:	480a      	ldr	r0, [pc, #40]	@ (80003f8 <sendSensorData+0x4c>)
 80003ce:	f004 ff95 	bl	80052fc <siprintf>

  // Transmit data via UART
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer), 100);
 80003d2:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <sendSensorData+0x4c>)
 80003d4:	f7ff ff04 	bl	80001e0 <strlen>
 80003d8:	4603      	mov	r3, r0
 80003da:	b29a      	uxth	r2, r3
 80003dc:	2364      	movs	r3, #100	@ 0x64
 80003de:	4906      	ldr	r1, [pc, #24]	@ (80003f8 <sendSensorData+0x4c>)
 80003e0:	4806      	ldr	r0, [pc, #24]	@ (80003fc <sendSensorData+0x50>)
 80003e2:	f004 fb11 	bl	8004a08 <HAL_UART_Transmit>
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200001ec 	.word	0x200001ec
 80003f0:	200001e0 	.word	0x200001e0
 80003f4:	08005d8c 	.word	0x08005d8c
 80003f8:	200001f4 	.word	0x200001f4
 80003fc:	20000158 	.word	0x20000158

08000400 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer period elapsed callback.
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a0d      	ldr	r2, [pc, #52]	@ (8000444 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d112      	bne.n	8000438 <HAL_TIM_PeriodElapsedCallback+0x38>
    // Increment system timestamp (100ms increment)
    system_timestamp += 100;
 8000412:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	3364      	adds	r3, #100	@ 0x64
 8000418:	4a0b      	ldr	r2, [pc, #44]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800041a:	6013      	str	r3, [r2, #0]

    // Set flag to send data
    send_data_flag = 1;
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]

    // Check if button was pressed and handle it
    if (button_pressed) {
 8000422:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	d005      	beq.n	8000438 <HAL_TIM_PeriodElapsedCallback+0x38>
      button_pressed = 0;
 800042c:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
      system_timestamp = 0;  // Reset timestamp
 8000432:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
    }
  }
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40001000 	.word	0x40001000
 8000448:	200001ec 	.word	0x200001ec
 800044c:	200001f0 	.word	0x200001f0
 8000450:	200001f1 	.word	0x200001f1

08000454 <HAL_GPIO_EXTI_Callback>:
  * @brief  GPIO EXTI callback.
  * @param  GPIO_Pin: Pin connected to EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin) {
 800045e:	88fb      	ldrh	r3, [r7, #6]
 8000460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000464:	d102      	bne.n	800046c <HAL_GPIO_EXTI_Callback+0x18>
    button_pressed = 1;  // Set flag to indicate button press
 8000466:	4b04      	ldr	r3, [pc, #16]	@ (8000478 <HAL_GPIO_EXTI_Callback+0x24>)
 8000468:	2201      	movs	r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
  }
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	200001f1 	.word	0x200001f1

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000482:	f000 fc6b 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000486:	f000 f887 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048a:	f000 f9f3 	bl	8000874 <MX_GPIO_Init>

  /* Visual debug indicator - double blink to show we've started */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2120      	movs	r1, #32
 8000492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000496:	f002 fa87 	bl	80029a8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800049a:	20c8      	movs	r0, #200	@ 0xc8
 800049c:	f000 fcc4 	bl	8000e28 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2120      	movs	r1, #32
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a8:	f002 fa7e 	bl	80029a8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80004ac:	20c8      	movs	r0, #200	@ 0xc8
 80004ae:	f000 fcbb 	bl	8000e28 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2120      	movs	r1, #32
 80004b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ba:	f002 fa75 	bl	80029a8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80004be:	20c8      	movs	r0, #200	@ 0xc8
 80004c0:	f000 fcb2 	bl	8000e28 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2120      	movs	r1, #32
 80004c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004cc:	f002 fa6c 	bl	80029a8 <HAL_GPIO_WritePin>

  /* Initialize UART */
  MX_USART2_UART_Init();
 80004d0:	f000 f982 	bl	80007d8 <MX_USART2_UART_Init>
  /* Print title */
  printTitle();
 80004d4:	f7ff fedc 	bl	8000290 <printTitle>
  /* Send initial debug message */
  printDebug("System starting...");
 80004d8:	4827      	ldr	r0, [pc, #156]	@ (8000578 <main+0xfc>)
 80004da:	f7ff ff47 	bl	800036c <printDebug>
  /* Initialize Timer */
  MX_TIM6_Init();
 80004de:	f000 f945 	bl	800076c <MX_TIM6_Init>
  /* Initialize DMA before ADC */
  MX_DMA_Init();
 80004e2:	f000 f9a9 	bl	8000838 <MX_DMA_Init>
  /* Critical: Enable ADC12 clock - essential for F3 series */
  __HAL_RCC_ADC12_CLK_ENABLE();
 80004e6:	4b25      	ldr	r3, [pc, #148]	@ (800057c <main+0x100>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a24      	ldr	r2, [pc, #144]	@ (800057c <main+0x100>)
 80004ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b22      	ldr	r3, [pc, #136]	@ (800057c <main+0x100>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  /* Initialize ADC with HAL */
  MX_ADC1_Init();
 80004fe:	f000 f8a9 	bl	8000654 <MX_ADC1_Init>
  /* Manual linking of DMA to ADC */
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8000502:	4b1f      	ldr	r3, [pc, #124]	@ (8000580 <main+0x104>)
 8000504:	4a1f      	ldr	r2, [pc, #124]	@ (8000584 <main+0x108>)
 8000506:	639a      	str	r2, [r3, #56]	@ 0x38
 8000508:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <main+0x108>)
 800050a:	4a1d      	ldr	r2, [pc, #116]	@ (8000580 <main+0x104>)
 800050c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Properly calibrate ADC */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800050e:	2100      	movs	r1, #0
 8000510:	481b      	ldr	r0, [pc, #108]	@ (8000580 <main+0x104>)
 8000512:	f001 f9ab 	bl	800186c <HAL_ADCEx_Calibration_Start>
  /* Configure ADC with DMA using direct register access for F3 series */
  ConfigureADCWithDMA_F3();
 8000516:	f7ff fed3 	bl	80002c0 <ConfigureADCWithDMA_F3>
  /* Start Timer with interrupt for periodic data transmission */
  HAL_TIM_Base_Start_IT(&htim6);
 800051a:	481b      	ldr	r0, [pc, #108]	@ (8000588 <main+0x10c>)
 800051c:	f003 ff38 	bl	8004390 <HAL_TIM_Base_Start_IT>

  /* Initial data transmission with default values */
  adc_buffer[0] = 0;
 8000520:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <main+0x110>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
  adc_buffer[1] = 0;
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <main+0x110>)
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  adc_buffer[2] = 0;
 800052c:	4b17      	ldr	r3, [pc, #92]	@ (800058c <main+0x110>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  sendSensorData();
 8000532:	f7ff ff3b 	bl	80003ac <sendSensorData>

  printDebug("Entering main loop...");
 8000536:	4816      	ldr	r0, [pc, #88]	@ (8000590 <main+0x114>)
 8000538:	f7ff ff18 	bl	800036c <printDebug>

  /* Infinite loop */
  uint32_t last_led_toggle = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]

  while (1)
  {
    // Check if it's time to send data (every 100ms)
    if (send_data_flag) {
 8000540:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <main+0x118>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d004      	beq.n	8000554 <main+0xd8>
      send_data_flag = 0;
 800054a:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <main+0x118>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
      sendSensorData();
 8000550:	f7ff ff2c 	bl	80003ac <sendSensorData>
    }

    uint32_t current_time = HAL_GetTick();
 8000554:	f000 fc5c 	bl	8000e10 <HAL_GetTick>
 8000558:	60b8      	str	r0, [r7, #8]
    // Toggle LED every 500ms for user indication that the system is alive
    if (current_time - last_led_toggle >= 500) {
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000564:	d3ec      	bcc.n	8000540 <main+0xc4>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000566:	2120      	movs	r1, #32
 8000568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800056c:	f002 fa34 	bl	80029d8 <HAL_GPIO_TogglePin>
      last_led_toggle = current_time;
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	60fb      	str	r3, [r7, #12]
  {
 8000574:	e7e4      	b.n	8000540 <main+0xc4>
 8000576:	bf00      	nop
 8000578:	08005dbc 	.word	0x08005dbc
 800057c:	40021000 	.word	0x40021000
 8000580:	20000078 	.word	0x20000078
 8000584:	200000c8 	.word	0x200000c8
 8000588:	2000010c 	.word	0x2000010c
 800058c:	200001e0 	.word	0x200001e0
 8000590:	08005dd0 	.word	0x08005dd0
 8000594:	200001f0 	.word	0x200001f0

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b0a6      	sub	sp, #152	@ 0x98
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005a2:	2228      	movs	r2, #40	@ 0x28
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 feca 	bl	8005340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2258      	movs	r2, #88	@ 0x58
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 febc 	bl	8005340 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fa20 	bl	8002a3c <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000602:	f000 f9a5 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000616:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fa2e 	bl	8003a84 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800062e:	f000 f98f 	bl	8000950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000632:	2302      	movs	r3, #2
 8000634:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fc33 	bl	8003ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000648:	f000 f982 	bl	8000950 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3798      	adds	r7, #152	@ 0x98
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000676:	4b3c      	ldr	r3, [pc, #240]	@ (8000768 <MX_ADC1_Init+0x114>)
 8000678:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800067c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800067e:	4b3a      	ldr	r3, [pc, #232]	@ (8000768 <MX_ADC1_Init+0x114>)
 8000680:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000684:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000686:	4b38      	ldr	r3, [pc, #224]	@ (8000768 <MX_ADC1_Init+0x114>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800068c:	4b36      	ldr	r3, [pc, #216]	@ (8000768 <MX_ADC1_Init+0x114>)
 800068e:	2201      	movs	r2, #1
 8000690:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000692:	4b35      	ldr	r3, [pc, #212]	@ (8000768 <MX_ADC1_Init+0x114>)
 8000694:	2201      	movs	r2, #1
 8000696:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000698:	4b33      	ldr	r3, [pc, #204]	@ (8000768 <MX_ADC1_Init+0x114>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a0:	4b31      	ldr	r3, [pc, #196]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a6:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80006b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006b4:	2203      	movs	r2, #3
 80006b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c0:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006c2:	2204      	movs	r2, #4
 80006c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c6:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006cc:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d2:	4825      	ldr	r0, [pc, #148]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006d4:	f000 fbea 	bl	8000eac <HAL_ADC_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006de:	f000 f937 	bl	8000950 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	481e      	ldr	r0, [pc, #120]	@ (8000768 <MX_ADC1_Init+0x114>)
 80006ee:	f001 fc41 	bl	8001f74 <HAL_ADCEx_MultiModeConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80006f8:	f000 f92a 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2301      	movs	r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000708:	2303      	movs	r3, #3
 800070a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	@ (8000768 <MX_ADC1_Init+0x114>)
 800071a:	f001 f941 	bl	80019a0 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000724:	f000 f914 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000728:	2302      	movs	r3, #2
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800072c:	2302      	movs	r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	@ (8000768 <MX_ADC1_Init+0x114>)
 8000736:	f001 f933 	bl	80019a0 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000740:	f000 f906 	bl	8000950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000744:	2306      	movs	r3, #6
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000748:	2303      	movs	r3, #3
 800074a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_ADC1_Init+0x114>)
 8000752:	f001 f925 	bl	80019a0 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 800075c:	f000 f8f8 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	@ 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000078 	.word	0x20000078

0800076c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_TIM6_Init+0x64>)
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <MX_TIM6_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 35999;
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_TIM6_Init+0x64>)
 8000784:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000788:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_TIM6_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_TIM6_Init+0x64>)
 8000792:	2263      	movs	r2, #99	@ 0x63
 8000794:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_TIM6_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800079c:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <MX_TIM6_Init+0x64>)
 800079e:	f003 fd9f 	bl	80042e0 <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007a8:	f000 f8d2 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_TIM6_Init+0x64>)
 80007ba:	f004 f82d 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007c4:	f000 f8c4 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000010c 	.word	0x2000010c
 80007d4:	40001000 	.word	0x40001000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	f004 f8a6 	bl	800496c <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f893 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000158 	.word	0x20000158
 8000834:	40004400 	.word	0x40004400

08000838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_DMA_Init+0x38>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a0b      	ldr	r2, [pc, #44]	@ (8000870 <MX_DMA_Init+0x38>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6153      	str	r3, [r2, #20]
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_DMA_Init+0x38>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	200b      	movs	r0, #11
 800085c:	f001 fdbd 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000860:	200b      	movs	r0, #11
 8000862:	f001 fdd6 	bl	8002412 <HAL_NVIC_EnableIRQ>

}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b2f      	ldr	r3, [pc, #188]	@ (8000948 <MX_GPIO_Init+0xd4>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a2e      	ldr	r2, [pc, #184]	@ (8000948 <MX_GPIO_Init+0xd4>)
 8000890:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <MX_GPIO_Init+0xd4>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <MX_GPIO_Init+0xd4>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a28      	ldr	r2, [pc, #160]	@ (8000948 <MX_GPIO_Init+0xd4>)
 80008a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <MX_GPIO_Init+0xd4>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <MX_GPIO_Init+0xd4>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a22      	ldr	r2, [pc, #136]	@ (8000948 <MX_GPIO_Init+0xd4>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <MX_GPIO_Init+0xd4>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_GPIO_Init+0xd4>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000948 <MX_GPIO_Init+0xd4>)
 80008d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_GPIO_Init+0xd4>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f2:	f002 f859 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	480f      	ldr	r0, [pc, #60]	@ (800094c <MX_GPIO_Init+0xd8>)
 800090e:	f001 fec1 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000912:	2320      	movs	r3, #32
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092c:	f001 feb2 	bl	8002694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2028      	movs	r0, #40	@ 0x28
 8000936:	f001 fd50 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800093a:	2028      	movs	r0, #40	@ 0x28
 800093c:	f001 fd69 	bl	8002412 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	@ 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	48000800 	.word	0x48000800

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b5b0      	push	{r4, r5, r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000956:	b672      	cpsid	i
}
 8000958:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();

// Optional: Send error message via UART
char error_msg[] = "System Error. Halting.\r\n";
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <Error_Handler+0x48>)
 800095c:	1d3c      	adds	r4, r7, #4
 800095e:	461d      	mov	r5, r3
 8000960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000968:	c403      	stmia	r4!, {r0, r1}
 800096a:	7022      	strb	r2, [r4, #0]
HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), 100);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fc36 	bl	80001e0 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	b29a      	uxth	r2, r3
 8000978:	1d39      	adds	r1, r7, #4
 800097a:	2364      	movs	r3, #100	@ 0x64
 800097c:	4807      	ldr	r0, [pc, #28]	@ (800099c <Error_Handler+0x4c>)
 800097e:	f004 f843 	bl	8004a08 <HAL_UART_Transmit>

// Blink LED to indicate error
while (1)
{
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000982:	2120      	movs	r1, #32
 8000984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000988:	f002 f826 	bl	80029d8 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 800098c:	20c8      	movs	r0, #200	@ 0xc8
 800098e:	f000 fa4b 	bl	8000e28 <HAL_Delay>
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000992:	bf00      	nop
 8000994:	e7f5      	b.n	8000982 <Error_Handler+0x32>
 8000996:	bf00      	nop
 8000998:	08005de8 	.word	0x08005de8
 800099c:	20000158 	.word	0x20000158

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <HAL_MspInit+0x44>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a0e      	ldr	r2, [pc, #56]	@ (80009e4 <HAL_MspInit+0x44>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <HAL_MspInit+0x44>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_MspInit+0x44>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <HAL_MspInit+0x44>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_MspInit+0x44>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f001 fcf4 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a08:	d16c      	bne.n	8000ae4 <HAL_ADC_MspInit+0xfc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a0a:	4b38      	ldr	r3, [pc, #224]	@ (8000aec <HAL_ADC_MspInit+0x104>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a37      	ldr	r2, [pc, #220]	@ (8000aec <HAL_ADC_MspInit+0x104>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b35      	ldr	r3, [pc, #212]	@ (8000aec <HAL_ADC_MspInit+0x104>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b32      	ldr	r3, [pc, #200]	@ (8000aec <HAL_ADC_MspInit+0x104>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a31      	ldr	r2, [pc, #196]	@ (8000aec <HAL_ADC_MspInit+0x104>)
 8000a28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <HAL_ADC_MspInit+0x104>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <HAL_ADC_MspInit+0x104>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8000aec <HAL_ADC_MspInit+0x104>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <HAL_ADC_MspInit+0x104>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a56:	2303      	movs	r3, #3
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4822      	ldr	r0, [pc, #136]	@ (8000af0 <HAL_ADC_MspInit+0x108>)
 8000a66:	f001 fe15 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f001 fe08 	bl	8002694 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000a86:	4a1c      	ldr	r2, [pc, #112]	@ (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a90:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a96:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000a98:	2280      	movs	r2, #128	@ 0x80
 8000a9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000aae:	2220      	movs	r2, #32
 8000ab0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ab8:	480e      	ldr	r0, [pc, #56]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000aba:	f001 fcc4 	bl	8002446 <HAL_DMA_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000ac4:	f7ff ff44 	bl	8000950 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000acc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ace:	4a09      	ldr	r2, [pc, #36]	@ (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2012      	movs	r0, #18
 8000ada:	f001 fc7e 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ade:	2012      	movs	r0, #18
 8000ae0:	f001 fc97 	bl	8002412 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000800 	.word	0x48000800
 8000af4:	200000c8 	.word	0x200000c8
 8000af8:	40020008 	.word	0x40020008

08000afc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d113      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2036      	movs	r0, #54	@ 0x36
 8000b2c:	f001 fc55 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b30:	2036      	movs	r0, #54	@ 0x36
 8000b32:	f001 fc6e 	bl	8002412 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40001000 	.word	0x40001000
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_UART_MspInit+0x7c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d128      	bne.n	8000bbc <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6a:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <HAL_UART_MspInit+0x80>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	4a16      	ldr	r2, [pc, #88]	@ (8000bc8 <HAL_UART_MspInit+0x80>)
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b74:	61d3      	str	r3, [r2, #28]
 8000b76:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <HAL_UART_MspInit+0x80>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <HAL_UART_MspInit+0x80>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <HAL_UART_MspInit+0x80>)
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	6153      	str	r3, [r2, #20]
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_UART_MspInit+0x80>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000baa:	2307      	movs	r3, #7
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb8:	f001 fd6c 	bl	8002694 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	@ 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40021000 	.word	0x40021000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f000 f8e1 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <DMA1_Channel1_IRQHandler+0x10>)
 8000c32:	f001 fc4f 	bl	80024d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000c8 	.word	0x200000c8

08000c40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <ADC1_2_IRQHandler+0x10>)
 8000c46:	f000 fb2b 	bl	80012a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000078 	.word	0x20000078

08000c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c5c:	f001 fed6 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <TIM6_DAC_IRQHandler+0x10>)
 8000c6a:	f003 fc01 	bl	8004470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000010c 	.word	0x2000010c

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f004 fb52 	bl	8005350 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]

    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20010000 	.word	0x20010000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	20000258 	.word	0x20000258
 8000ce0:	200003a8 	.word	0x200003a8

08000ce4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f004 fb11 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3a:	f7ff fb9f 	bl	800047c <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d4c:	08005e80 	.word	0x08005e80
  ldr r2, =_sbss
 8000d50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d54:	200003a8 	.word	0x200003a8

08000d58 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC3_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_Init+0x28>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <HAL_Init+0x28>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f001 fb29 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff fe12 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40022000 	.word	0x40022000

08000d88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fb41 	bl	800242e <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc4:	f001 fb09 	bl	80023da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	2000025c 	.word	0x2000025c

08000e10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e14:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	2000025c 	.word	0x2000025c

08000e28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09a      	sub	sp, #104	@ 0x68
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e1e3      	b.n	8001294 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d176      	bne.n	8000fcc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d152      	bne.n	8000f8c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fd71 	bl	80009e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d13b      	bne.n	8000f8c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f001 f91f 	bl	8002158 <ADC_Disable>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d12f      	bne.n	8000f8c <HAL_ADC_Init+0xe0>
 8000f2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d12b      	bne.n	8000f8c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f3c:	f023 0302 	bic.w	r3, r3, #2
 8000f40:	f043 0202 	orr.w	r2, r3, #2
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f56:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f66:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f68:	4b92      	ldr	r3, [pc, #584]	@ (80011b4 <HAL_ADC_Init+0x308>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a92      	ldr	r2, [pc, #584]	@ (80011b8 <HAL_ADC_Init+0x30c>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9a      	lsrs	r2, r3, #18
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f7e:	e002      	b.n	8000f86 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f9      	bne.n	8000f80 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fa8:	d110      	bne.n	8000fcc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	f023 0312 	bic.w	r3, r3, #18
 8000fb2:	f043 0210 	orr.w	r2, r3, #16
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f040 8150 	bne.w	800127a <HAL_ADC_Init+0x3ce>
 8000fda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f040 814b 	bne.w	800127a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 8143 	bne.w	800127a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ffc:	f043 0202 	orr.w	r2, r3, #2
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800100c:	d004      	beq.n	8001018 <HAL_ADC_Init+0x16c>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a6a      	ldr	r2, [pc, #424]	@ (80011bc <HAL_ADC_Init+0x310>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_ADC_Init+0x170>
 8001018:	4b69      	ldr	r3, [pc, #420]	@ (80011c0 <HAL_ADC_Init+0x314>)
 800101a:	e000      	b.n	800101e <HAL_ADC_Init+0x172>
 800101c:	4b69      	ldr	r3, [pc, #420]	@ (80011c4 <HAL_ADC_Init+0x318>)
 800101e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001028:	d102      	bne.n	8001030 <HAL_ADC_Init+0x184>
 800102a:	4b64      	ldr	r3, [pc, #400]	@ (80011bc <HAL_ADC_Init+0x310>)
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e01a      	b.n	8001066 <HAL_ADC_Init+0x1ba>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a61      	ldr	r2, [pc, #388]	@ (80011bc <HAL_ADC_Init+0x310>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d103      	bne.n	8001042 <HAL_ADC_Init+0x196>
 800103a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e011      	b.n	8001066 <HAL_ADC_Init+0x1ba>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a60      	ldr	r2, [pc, #384]	@ (80011c8 <HAL_ADC_Init+0x31c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d102      	bne.n	8001052 <HAL_ADC_Init+0x1a6>
 800104c:	4b5f      	ldr	r3, [pc, #380]	@ (80011cc <HAL_ADC_Init+0x320>)
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e009      	b.n	8001066 <HAL_ADC_Init+0x1ba>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a5d      	ldr	r2, [pc, #372]	@ (80011cc <HAL_ADC_Init+0x320>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d102      	bne.n	8001062 <HAL_ADC_Init+0x1b6>
 800105c:	4b5a      	ldr	r3, [pc, #360]	@ (80011c8 <HAL_ADC_Init+0x31c>)
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e001      	b.n	8001066 <HAL_ADC_Init+0x1ba>
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <HAL_ADC_Init+0x1da>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x1da>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_ADC_Init+0x1dc>
 8001086:	2300      	movs	r3, #0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d11c      	bne.n	80010c6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800108c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800108e:	2b00      	cmp	r3, #0
 8001090:	d010      	beq.n	80010b4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d107      	bne.n	80010ae <HAL_ADC_Init+0x202>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Init+0x202>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_ADC_Init+0x204>
 80010ae:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d108      	bne.n	80010c6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010c4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7e5b      	ldrb	r3, [r3, #25]
 80010ca:	035b      	lsls	r3, r3, #13
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80010d0:	2a01      	cmp	r2, #1
 80010d2:	d002      	beq.n	80010da <HAL_ADC_Init+0x22e>
 80010d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010d8:	e000      	b.n	80010dc <HAL_ADC_Init+0x230>
 80010da:	2200      	movs	r2, #0
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010ec:	4313      	orrs	r3, r2
 80010ee:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d11b      	bne.n	8001132 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7e5b      	ldrb	r3, [r3, #25]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001106:	3b01      	subs	r3, #1
 8001108:	045a      	lsls	r2, r3, #17
 800110a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800110c:	4313      	orrs	r3, r2
 800110e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001112:	663b      	str	r3, [r7, #96]	@ 0x60
 8001114:	e00d      	b.n	8001132 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800111e:	f043 0220 	orr.w	r2, r3, #32
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001136:	2b01      	cmp	r3, #1
 8001138:	d054      	beq.n	80011e4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a22      	ldr	r2, [pc, #136]	@ (80011c8 <HAL_ADC_Init+0x31c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d004      	beq.n	800114e <HAL_ADC_Init+0x2a2>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a20      	ldr	r2, [pc, #128]	@ (80011cc <HAL_ADC_Init+0x320>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d140      	bne.n	80011d0 <HAL_ADC_Init+0x324>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001152:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001156:	d02a      	beq.n	80011ae <HAL_ADC_Init+0x302>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800115c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001160:	d022      	beq.n	80011a8 <HAL_ADC_Init+0x2fc>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001166:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800116a:	d01a      	beq.n	80011a2 <HAL_ADC_Init+0x2f6>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001170:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001174:	d012      	beq.n	800119c <HAL_ADC_Init+0x2f0>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800117e:	d00a      	beq.n	8001196 <HAL_ADC_Init+0x2ea>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001188:	d002      	beq.n	8001190 <HAL_ADC_Init+0x2e4>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118e:	e023      	b.n	80011d8 <HAL_ADC_Init+0x32c>
 8001190:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001194:	e020      	b.n	80011d8 <HAL_ADC_Init+0x32c>
 8001196:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800119a:	e01d      	b.n	80011d8 <HAL_ADC_Init+0x32c>
 800119c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80011a0:	e01a      	b.n	80011d8 <HAL_ADC_Init+0x32c>
 80011a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a6:	e017      	b.n	80011d8 <HAL_ADC_Init+0x32c>
 80011a8:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80011ac:	e014      	b.n	80011d8 <HAL_ADC_Init+0x32c>
 80011ae:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80011b2:	e011      	b.n	80011d8 <HAL_ADC_Init+0x32c>
 80011b4:	20000000 	.word	0x20000000
 80011b8:	431bde83 	.word	0x431bde83
 80011bc:	50000100 	.word	0x50000100
 80011c0:	50000300 	.word	0x50000300
 80011c4:	50000700 	.word	0x50000700
 80011c8:	50000400 	.word	0x50000400
 80011cc:	50000500 	.word	0x50000500
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011dc:	4313      	orrs	r3, r2
 80011de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011e0:	4313      	orrs	r3, r2
 80011e2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d114      	bne.n	800121c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001200:	f023 0302 	bic.w	r3, r3, #2
 8001204:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7e1b      	ldrb	r3, [r3, #24]
 800120a:	039a      	lsls	r2, r3, #14
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4313      	orrs	r3, r2
 8001216:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001218:	4313      	orrs	r3, r2
 800121a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <HAL_ADC_Init+0x3f0>)
 8001224:	4013      	ands	r3, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800122c:	430b      	orrs	r3, r1
 800122e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d10c      	bne.n	8001252 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f023 010f 	bic.w	r1, r3, #15
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001250:	e007      	b.n	8001262 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 020f 	bic.w	r2, r2, #15
 8001260:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	f023 0303 	bic.w	r3, r3, #3
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	641a      	str	r2, [r3, #64]	@ 0x40
 8001278:	e00a      	b.n	8001290 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f023 0312 	bic.w	r3, r3, #18
 8001282:	f043 0210 	orr.w	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800128a:	2301      	movs	r3, #1
 800128c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001290:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001294:	4618      	mov	r0, r3
 8001296:	3768      	adds	r7, #104	@ 0x68
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	fff0c007 	.word	0xfff0c007

080012a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <HAL_ADC_IRQHandler+0x38>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10b      	bne.n	80012f0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 80bc 	beq.w	800145c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80b6 	beq.w	800145c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d105      	bne.n	8001308 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001310:	d004      	beq.n	800131c <HAL_ADC_IRQHandler+0x7c>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a90      	ldr	r2, [pc, #576]	@ (8001558 <HAL_ADC_IRQHandler+0x2b8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d106      	bne.n	800132a <HAL_ADC_IRQHandler+0x8a>
 800131c:	4b8f      	ldr	r3, [pc, #572]	@ (800155c <HAL_ADC_IRQHandler+0x2bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	2b00      	cmp	r3, #0
 8001326:	d03e      	beq.n	80013a6 <HAL_ADC_IRQHandler+0x106>
 8001328:	e005      	b.n	8001336 <HAL_ADC_IRQHandler+0x96>
 800132a:	4b8d      	ldr	r3, [pc, #564]	@ (8001560 <HAL_ADC_IRQHandler+0x2c0>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	2b00      	cmp	r3, #0
 8001334:	d037      	beq.n	80013a6 <HAL_ADC_IRQHandler+0x106>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800133e:	d004      	beq.n	800134a <HAL_ADC_IRQHandler+0xaa>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a84      	ldr	r2, [pc, #528]	@ (8001558 <HAL_ADC_IRQHandler+0x2b8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d106      	bne.n	8001358 <HAL_ADC_IRQHandler+0xb8>
 800134a:	4b84      	ldr	r3, [pc, #528]	@ (800155c <HAL_ADC_IRQHandler+0x2bc>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	2b05      	cmp	r3, #5
 8001354:	d027      	beq.n	80013a6 <HAL_ADC_IRQHandler+0x106>
 8001356:	e005      	b.n	8001364 <HAL_ADC_IRQHandler+0xc4>
 8001358:	4b81      	ldr	r3, [pc, #516]	@ (8001560 <HAL_ADC_IRQHandler+0x2c0>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	2b05      	cmp	r3, #5
 8001362:	d020      	beq.n	80013a6 <HAL_ADC_IRQHandler+0x106>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800136c:	d004      	beq.n	8001378 <HAL_ADC_IRQHandler+0xd8>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a79      	ldr	r2, [pc, #484]	@ (8001558 <HAL_ADC_IRQHandler+0x2b8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d106      	bne.n	8001386 <HAL_ADC_IRQHandler+0xe6>
 8001378:	4b78      	ldr	r3, [pc, #480]	@ (800155c <HAL_ADC_IRQHandler+0x2bc>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	2b09      	cmp	r3, #9
 8001382:	d010      	beq.n	80013a6 <HAL_ADC_IRQHandler+0x106>
 8001384:	e005      	b.n	8001392 <HAL_ADC_IRQHandler+0xf2>
 8001386:	4b76      	ldr	r3, [pc, #472]	@ (8001560 <HAL_ADC_IRQHandler+0x2c0>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	2b09      	cmp	r3, #9
 8001390:	d009      	beq.n	80013a6 <HAL_ADC_IRQHandler+0x106>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800139a:	d004      	beq.n	80013a6 <HAL_ADC_IRQHandler+0x106>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a70      	ldr	r2, [pc, #448]	@ (8001564 <HAL_ADC_IRQHandler+0x2c4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d104      	bne.n	80013b0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	e00f      	b.n	80013d0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013b8:	d004      	beq.n	80013c4 <HAL_ADC_IRQHandler+0x124>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a66      	ldr	r2, [pc, #408]	@ (8001558 <HAL_ADC_IRQHandler+0x2b8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d102      	bne.n	80013ca <HAL_ADC_IRQHandler+0x12a>
 80013c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013c8:	e000      	b.n	80013cc <HAL_ADC_IRQHandler+0x12c>
 80013ca:	4b66      	ldr	r3, [pc, #408]	@ (8001564 <HAL_ADC_IRQHandler+0x2c4>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d137      	bne.n	800144e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d132      	bne.n	800144e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d02d      	beq.n	800144e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d11a      	bne.n	8001436 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 020c 	bic.w	r2, r2, #12
 800140e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d112      	bne.n	800144e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	f043 0201 	orr.w	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	641a      	str	r2, [r3, #64]	@ 0x40
 8001434:	e00b      	b.n	800144e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f043 0210 	orr.w	r2, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f043 0201 	orr.w	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fd0e 	bl	8000e70 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	220c      	movs	r2, #12
 800145a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <HAL_ADC_IRQHandler+0x1d0>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10b      	bne.n	8001488 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8138 	beq.w	80016ec <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8132 	beq.w	80016ec <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800149c:	d004      	beq.n	80014a8 <HAL_ADC_IRQHandler+0x208>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001558 <HAL_ADC_IRQHandler+0x2b8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_IRQHandler+0x216>
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <HAL_ADC_IRQHandler+0x2bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d03e      	beq.n	8001532 <HAL_ADC_IRQHandler+0x292>
 80014b4:	e005      	b.n	80014c2 <HAL_ADC_IRQHandler+0x222>
 80014b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <HAL_ADC_IRQHandler+0x2c0>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d037      	beq.n	8001532 <HAL_ADC_IRQHandler+0x292>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014ca:	d004      	beq.n	80014d6 <HAL_ADC_IRQHandler+0x236>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <HAL_ADC_IRQHandler+0x2b8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d106      	bne.n	80014e4 <HAL_ADC_IRQHandler+0x244>
 80014d6:	4b21      	ldr	r3, [pc, #132]	@ (800155c <HAL_ADC_IRQHandler+0x2bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d027      	beq.n	8001532 <HAL_ADC_IRQHandler+0x292>
 80014e2:	e005      	b.n	80014f0 <HAL_ADC_IRQHandler+0x250>
 80014e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <HAL_ADC_IRQHandler+0x2c0>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2b05      	cmp	r3, #5
 80014ee:	d020      	beq.n	8001532 <HAL_ADC_IRQHandler+0x292>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014f8:	d004      	beq.n	8001504 <HAL_ADC_IRQHandler+0x264>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a16      	ldr	r2, [pc, #88]	@ (8001558 <HAL_ADC_IRQHandler+0x2b8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d106      	bne.n	8001512 <HAL_ADC_IRQHandler+0x272>
 8001504:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_ADC_IRQHandler+0x2bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	2b09      	cmp	r3, #9
 800150e:	d010      	beq.n	8001532 <HAL_ADC_IRQHandler+0x292>
 8001510:	e005      	b.n	800151e <HAL_ADC_IRQHandler+0x27e>
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <HAL_ADC_IRQHandler+0x2c0>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2b09      	cmp	r3, #9
 800151c:	d009      	beq.n	8001532 <HAL_ADC_IRQHandler+0x292>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001526:	d004      	beq.n	8001532 <HAL_ADC_IRQHandler+0x292>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <HAL_ADC_IRQHandler+0x2c4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d104      	bne.n	800153c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	e018      	b.n	800156e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001544:	d004      	beq.n	8001550 <HAL_ADC_IRQHandler+0x2b0>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a03      	ldr	r2, [pc, #12]	@ (8001558 <HAL_ADC_IRQHandler+0x2b8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d10b      	bne.n	8001568 <HAL_ADC_IRQHandler+0x2c8>
 8001550:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001554:	e009      	b.n	800156a <HAL_ADC_IRQHandler+0x2ca>
 8001556:	bf00      	nop
 8001558:	50000100 	.word	0x50000100
 800155c:	50000300 	.word	0x50000300
 8001560:	50000700 	.word	0x50000700
 8001564:	50000400 	.word	0x50000400
 8001568:	4b92      	ldr	r3, [pc, #584]	@ (80017b4 <HAL_ADC_IRQHandler+0x514>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001574:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 80b0 	bne.w	80016de <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00d      	beq.n	80015a4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 80a3 	bne.w	80016de <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 809d 	bne.w	80016de <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8097 	beq.w	80016de <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b8:	d004      	beq.n	80015c4 <HAL_ADC_IRQHandler+0x324>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7e      	ldr	r2, [pc, #504]	@ (80017b8 <HAL_ADC_IRQHandler+0x518>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d106      	bne.n	80015d2 <HAL_ADC_IRQHandler+0x332>
 80015c4:	4b7d      	ldr	r3, [pc, #500]	@ (80017bc <HAL_ADC_IRQHandler+0x51c>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d03e      	beq.n	800164e <HAL_ADC_IRQHandler+0x3ae>
 80015d0:	e005      	b.n	80015de <HAL_ADC_IRQHandler+0x33e>
 80015d2:	4b7b      	ldr	r3, [pc, #492]	@ (80017c0 <HAL_ADC_IRQHandler+0x520>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d037      	beq.n	800164e <HAL_ADC_IRQHandler+0x3ae>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015e6:	d004      	beq.n	80015f2 <HAL_ADC_IRQHandler+0x352>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a72      	ldr	r2, [pc, #456]	@ (80017b8 <HAL_ADC_IRQHandler+0x518>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d106      	bne.n	8001600 <HAL_ADC_IRQHandler+0x360>
 80015f2:	4b72      	ldr	r3, [pc, #456]	@ (80017bc <HAL_ADC_IRQHandler+0x51c>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d027      	beq.n	800164e <HAL_ADC_IRQHandler+0x3ae>
 80015fe:	e005      	b.n	800160c <HAL_ADC_IRQHandler+0x36c>
 8001600:	4b6f      	ldr	r3, [pc, #444]	@ (80017c0 <HAL_ADC_IRQHandler+0x520>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	2b06      	cmp	r3, #6
 800160a:	d020      	beq.n	800164e <HAL_ADC_IRQHandler+0x3ae>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001614:	d004      	beq.n	8001620 <HAL_ADC_IRQHandler+0x380>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a67      	ldr	r2, [pc, #412]	@ (80017b8 <HAL_ADC_IRQHandler+0x518>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d106      	bne.n	800162e <HAL_ADC_IRQHandler+0x38e>
 8001620:	4b66      	ldr	r3, [pc, #408]	@ (80017bc <HAL_ADC_IRQHandler+0x51c>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	2b07      	cmp	r3, #7
 800162a:	d010      	beq.n	800164e <HAL_ADC_IRQHandler+0x3ae>
 800162c:	e005      	b.n	800163a <HAL_ADC_IRQHandler+0x39a>
 800162e:	4b64      	ldr	r3, [pc, #400]	@ (80017c0 <HAL_ADC_IRQHandler+0x520>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	2b07      	cmp	r3, #7
 8001638:	d009      	beq.n	800164e <HAL_ADC_IRQHandler+0x3ae>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001642:	d004      	beq.n	800164e <HAL_ADC_IRQHandler+0x3ae>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a5a      	ldr	r2, [pc, #360]	@ (80017b4 <HAL_ADC_IRQHandler+0x514>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d104      	bne.n	8001658 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e00f      	b.n	8001678 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001660:	d004      	beq.n	800166c <HAL_ADC_IRQHandler+0x3cc>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a54      	ldr	r2, [pc, #336]	@ (80017b8 <HAL_ADC_IRQHandler+0x518>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d102      	bne.n	8001672 <HAL_ADC_IRQHandler+0x3d2>
 800166c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001670:	e000      	b.n	8001674 <HAL_ADC_IRQHandler+0x3d4>
 8001672:	4b50      	ldr	r3, [pc, #320]	@ (80017b4 <HAL_ADC_IRQHandler+0x514>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d12d      	bne.n	80016de <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d11a      	bne.n	80016c6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800169e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d112      	bne.n	80016de <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80016c4:	e00b      	b.n	80016de <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f043 0210 	orr.w	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f936 	bl	8001950 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2260      	movs	r2, #96	@ 0x60
 80016ea:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d011      	beq.n	800171a <HAL_ADC_IRQHandler+0x47a>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00c      	beq.n	800171a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fbb9 	bl	8000e84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d012      	beq.n	800174a <HAL_ADC_IRQHandler+0x4aa>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00d      	beq.n	800174a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f91c 	bl	8001978 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001748:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001750:	2b00      	cmp	r3, #0
 8001752:	d012      	beq.n	800177a <HAL_ADC_IRQHandler+0x4da>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f90e 	bl	800198c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001778:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d04f      	beq.n	8001824 <HAL_ADC_IRQHandler+0x584>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d04a      	beq.n	8001824 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001792:	2b01      	cmp	r3, #1
 8001794:	d102      	bne.n	800179c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001796:	2301      	movs	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e02d      	b.n	80017f8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017a4:	d004      	beq.n	80017b0 <HAL_ADC_IRQHandler+0x510>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a03      	ldr	r2, [pc, #12]	@ (80017b8 <HAL_ADC_IRQHandler+0x518>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d109      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x524>
 80017b0:	4b02      	ldr	r3, [pc, #8]	@ (80017bc <HAL_ADC_IRQHandler+0x51c>)
 80017b2:	e008      	b.n	80017c6 <HAL_ADC_IRQHandler+0x526>
 80017b4:	50000400 	.word	0x50000400
 80017b8:	50000100 	.word	0x50000100
 80017bc:	50000300 	.word	0x50000300
 80017c0:	50000700 	.word	0x50000700
 80017c4:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <HAL_ADC_IRQHandler+0x5c8>)
 80017c6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d10a      	bne.n	80017f8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80017e2:	2301      	movs	r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e007      	b.n	80017f8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80017f4:	2301      	movs	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d10e      	bne.n	800181c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f043 0202 	orr.w	r2, r3, #2
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fb3e 	bl	8000e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2210      	movs	r2, #16
 8001822:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d018      	beq.n	8001860 <HAL_ADC_IRQHandler+0x5c0>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	f043 0208 	orr.w	r2, r3, #8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001858:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f882 	bl	8001964 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	50000700 	.word	0x50000700

0800186c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_ADCEx_Calibration_Start+0x1c>
 8001884:	2302      	movs	r3, #2
 8001886:	e05f      	b.n	8001948 <HAL_ADCEx_Calibration_Start+0xdc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fc61 	bl	8002158 <ADC_Disable>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d14e      	bne.n	800193e <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80018b4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018ca:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018da:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80018dc:	f7ff fa98 	bl	8000e10 <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018e2:	e01c      	b.n	800191e <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018e4:	f7ff fa94 	bl	8000e10 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b0a      	cmp	r3, #10
 80018f0:	d915      	bls.n	800191e <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001900:	d10d      	bne.n	800191e <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f023 0312 	bic.w	r3, r3, #18
 800190a:	f043 0210 	orr.w	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e014      	b.n	8001948 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800192c:	d0da      	beq.n	80018e4 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f023 0303 	bic.w	r3, r3, #3
 8001936:	f043 0201 	orr.w	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b09b      	sub	sp, #108	@ 0x6c
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x22>
 80019be:	2302      	movs	r3, #2
 80019c0:	e2c8      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x5b4>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f040 82ac 	bne.w	8001f32 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d81c      	bhi.n	8001a1c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	461a      	mov	r2, r3
 80019f6:	231f      	movs	r3, #31
 80019f8:	4093      	lsls	r3, r2
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4019      	ands	r1, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a1a:	e063      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b09      	cmp	r3, #9
 8001a22:	d81e      	bhi.n	8001a62 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	3b1e      	subs	r3, #30
 8001a38:	221f      	movs	r2, #31
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4019      	ands	r1, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	3b1e      	subs	r3, #30
 8001a54:	fa00 f203 	lsl.w	r2, r0, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a60:	e040      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b0e      	cmp	r3, #14
 8001a68:	d81e      	bhi.n	8001aa8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	3b3c      	subs	r3, #60	@ 0x3c
 8001a7e:	221f      	movs	r2, #31
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	4019      	ands	r1, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	3b3c      	subs	r3, #60	@ 0x3c
 8001a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001aa6:	e01d      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	3b5a      	subs	r3, #90	@ 0x5a
 8001abc:	221f      	movs	r2, #31
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	4019      	ands	r1, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	3b5a      	subs	r3, #90	@ 0x5a
 8001ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 80e5 	bne.w	8001cbe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d91c      	bls.n	8001b36 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6999      	ldr	r1, [r3, #24]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b1e      	subs	r3, #30
 8001b0e:	2207      	movs	r2, #7
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4019      	ands	r1, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6898      	ldr	r0, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	3b1e      	subs	r3, #30
 8001b28:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	619a      	str	r2, [r3, #24]
 8001b34:	e019      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6959      	ldr	r1, [r3, #20]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4019      	ands	r1, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6898      	ldr	r0, [r3, #8]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d84f      	bhi.n	8001c2c <HAL_ADC_ConfigChannel+0x28c>
 8001b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b94 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b92:	bf00      	nop
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bc7 	.word	0x08001bc7
 8001b9c:	08001be9 	.word	0x08001be9
 8001ba0:	08001c0b 	.word	0x08001c0b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001baa:	4b99      	ldr	r3, [pc, #612]	@ (8001e10 <HAL_ADC_ConfigChannel+0x470>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	0691      	lsls	r1, r2, #26
 8001bb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001bc2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bc4:	e07b      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bcc:	4b90      	ldr	r3, [pc, #576]	@ (8001e10 <HAL_ADC_ConfigChannel+0x470>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	0691      	lsls	r1, r2, #26
 8001bd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001be4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001be6:	e06a      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001bee:	4b88      	ldr	r3, [pc, #544]	@ (8001e10 <HAL_ADC_ConfigChannel+0x470>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	0691      	lsls	r1, r2, #26
 8001bf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001c06:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c08:	e059      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c10:	4b7f      	ldr	r3, [pc, #508]	@ (8001e10 <HAL_ADC_ConfigChannel+0x470>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	0691      	lsls	r1, r2, #26
 8001c1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001c28:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c2a:	e048      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	069b      	lsls	r3, r3, #26
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c4e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	069b      	lsls	r3, r3, #26
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d107      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c72:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	069b      	lsls	r3, r3, #26
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d107      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c96:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	069b      	lsls	r3, r3, #26
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d107      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001cba:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001cbc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d108      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x33e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x33e>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x340>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f040 8131 	bne.w	8001f48 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d00f      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001d0c:	e049      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	d91c      	bls.n	8001d6a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6999      	ldr	r1, [r3, #24]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1b      	subs	r3, #27
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4019      	ands	r1, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6898      	ldr	r0, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b1b      	subs	r3, #27
 8001d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	619a      	str	r2, [r3, #24]
 8001d68:	e01b      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6959      	ldr	r1, [r3, #20]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	4019      	ands	r1, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6898      	ldr	r0, [r3, #8]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001daa:	d004      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x416>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a18      	ldr	r2, [pc, #96]	@ (8001e14 <HAL_ADC_ConfigChannel+0x474>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x41a>
 8001db6:	4b18      	ldr	r3, [pc, #96]	@ (8001e18 <HAL_ADC_ConfigChannel+0x478>)
 8001db8:	e000      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x41c>
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_ADC_ConfigChannel+0x47c>)
 8001dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d105      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d015      	beq.n	8001dfe <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dd6:	2b11      	cmp	r3, #17
 8001dd8:	d105      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	f040 80ac 	bne.w	8001f48 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001df0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 80a5 	bne.w	8001f48 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e06:	d10b      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x480>
 8001e08:	4b02      	ldr	r3, [pc, #8]	@ (8001e14 <HAL_ADC_ConfigChannel+0x474>)
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	e023      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x4b6>
 8001e0e:	bf00      	nop
 8001e10:	83fff000 	.word	0x83fff000
 8001e14:	50000100 	.word	0x50000100
 8001e18:	50000300 	.word	0x50000300
 8001e1c:	50000700 	.word	0x50000700
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a4e      	ldr	r2, [pc, #312]	@ (8001f60 <HAL_ADC_ConfigChannel+0x5c0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d103      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x492>
 8001e2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e011      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x4b6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a4b      	ldr	r2, [pc, #300]	@ (8001f64 <HAL_ADC_ConfigChannel+0x5c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d102      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x4a2>
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f68 <HAL_ADC_ConfigChannel+0x5c8>)
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e009      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x4b6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a48      	ldr	r2, [pc, #288]	@ (8001f68 <HAL_ADC_ConfigChannel+0x5c8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d102      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x4b2>
 8001e4c:	4b45      	ldr	r3, [pc, #276]	@ (8001f64 <HAL_ADC_ConfigChannel+0x5c4>)
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	e001      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x4b6>
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d108      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x4d6>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x4d6>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x4d8>
 8001e76:	2300      	movs	r3, #0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d150      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d010      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x4fe>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x4fe>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x500>
 8001e9e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d13c      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d11d      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x548>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eb4:	d118      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ec0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f6c <HAL_ADC_ConfigChannel+0x5cc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f70 <HAL_ADC_ConfigChannel+0x5d0>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	0c9a      	lsrs	r2, r3, #18
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ed8:	e002      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f9      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ee6:	e02e      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b11      	cmp	r3, #17
 8001eee:	d10b      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x568>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ef8:	d106      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f04:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f06:	e01e      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b12      	cmp	r3, #18
 8001f0e:	d11a      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f1a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f1c:	e013      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f043 0220 	orr.w	r2, r3, #32
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001f30:	e00a      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001f44:	e000      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f46:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	376c      	adds	r7, #108	@ 0x6c
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	50000100 	.word	0x50000100
 8001f64:	50000400 	.word	0x50000400
 8001f68:	50000500 	.word	0x50000500
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	431bde83 	.word	0x431bde83

08001f74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b099      	sub	sp, #100	@ 0x64
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f8c:	d102      	bne.n	8001f94 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002144 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	e01a      	b.n	8001fca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6a      	ldr	r2, [pc, #424]	@ (8002144 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d103      	bne.n	8001fa6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001f9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	e011      	b.n	8001fca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a67      	ldr	r2, [pc, #412]	@ (8002148 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d102      	bne.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001fb0:	4b66      	ldr	r3, [pc, #408]	@ (800214c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	e009      	b.n	8001fca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a64      	ldr	r2, [pc, #400]	@ (800214c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d102      	bne.n	8001fc6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001fc0:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	e001      	b.n	8001fca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b0      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e0a9      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 808d 	bne.w	8002114 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 8086 	bne.w	8002114 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002010:	d004      	beq.n	800201c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a4b      	ldr	r2, [pc, #300]	@ (8002144 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800201c:	4b4c      	ldr	r3, [pc, #304]	@ (8002150 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800201e:	e000      	b.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002020:	4b4c      	ldr	r3, [pc, #304]	@ (8002154 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002022:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d040      	beq.n	80020ae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800202c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800203e:	035b      	lsls	r3, r3, #13
 8002040:	430b      	orrs	r3, r1
 8002042:	431a      	orrs	r2, r3
 8002044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002046:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d108      	bne.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002068:	2300      	movs	r3, #0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d15c      	bne.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800208a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800208c:	2b00      	cmp	r3, #0
 800208e:	d14b      	bne.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002098:	f023 030f 	bic.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	6811      	ldr	r1, [r2, #0]
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	6892      	ldr	r2, [r2, #8]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020aa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020ac:	e03c      	b.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020b8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d108      	bne.n	80020da <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d123      	bne.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80020fc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d112      	bne.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800210a:	f023 030f 	bic.w	r3, r3, #15
 800210e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002110:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002112:	e009      	b.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	f043 0220 	orr.w	r2, r3, #32
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002126:	e000      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002128:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002132:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002136:	4618      	mov	r0, r3
 8002138:	3764      	adds	r7, #100	@ 0x64
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	50000100 	.word	0x50000100
 8002148:	50000400 	.word	0x50000400
 800214c:	50000500 	.word	0x50000500
 8002150:	50000300 	.word	0x50000300
 8002154:	50000700 	.word	0x50000700

08002158 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d108      	bne.n	8002184 <ADC_Disable+0x2c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <ADC_Disable+0x2c>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <ADC_Disable+0x2e>
 8002184:	2300      	movs	r3, #0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d047      	beq.n	800221a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030d 	and.w	r3, r3, #13
 8002194:	2b01      	cmp	r3, #1
 8002196:	d10f      	bne.n	80021b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0202 	orr.w	r2, r2, #2
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2203      	movs	r2, #3
 80021ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fe2e 	bl	8000e10 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021b6:	e029      	b.n	800220c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f043 0210 	orr.w	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e023      	b.n	800221c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021d4:	f7fe fe1c 	bl	8000e10 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d914      	bls.n	800220c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d10d      	bne.n	800220c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	f043 0210 	orr.w	r2, r3, #16
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e007      	b.n	800221c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d0dc      	beq.n	80021d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800224c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002270:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <__NVIC_GetPriorityGrouping+0x18>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 0307 	and.w	r3, r3, #7
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	db0b      	blt.n	80022b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	4907      	ldr	r1, [pc, #28]	@ (80022c0 <__NVIC_EnableIRQ+0x38>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2001      	movs	r0, #1
 80022aa:	fa00 f202 	lsl.w	r2, r0, r2
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023a4:	f7ff ff8e 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff29 	bl	8002224 <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff3e 	bl	800226c <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff8e 	bl	8002318 <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5d 	bl	80022c4 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff31 	bl	8002288 <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffa2 	bl	8002380 <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e037      	b.n	80024cc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002472:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002476:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f8b4 	bl	800261c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	2204      	movs	r2, #4
 80024f2:	409a      	lsls	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d024      	beq.n	8002546 <HAL_DMA_IRQHandler+0x72>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01f      	beq.n	8002546 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d107      	bne.n	8002524 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0204 	bic.w	r2, r2, #4
 8002522:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252c:	2104      	movs	r1, #4
 800252e:	fa01 f202 	lsl.w	r2, r1, r2
 8002532:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d06a      	beq.n	8002612 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002544:	e065      	b.n	8002612 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	2202      	movs	r2, #2
 800254c:	409a      	lsls	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d02c      	beq.n	80025b0 <HAL_DMA_IRQHandler+0xdc>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d027      	beq.n	80025b0 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10b      	bne.n	8002586 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 020a 	bic.w	r2, r2, #10
 800257c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258e:	2102      	movs	r1, #2
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d035      	beq.n	8002612 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025ae:	e030      	b.n	8002612 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	2208      	movs	r2, #8
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d028      	beq.n	8002612 <HAL_DMA_IRQHandler+0x13e>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d023      	beq.n	8002612 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 020e 	bic.w	r2, r2, #14
 80025d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
    }
  }
}
 8002610:	e7ff      	b.n	8002612 <HAL_DMA_IRQHandler+0x13e>
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b14      	ldr	r3, [pc, #80]	@ (800267c <DMA_CalcBaseAndBitshift+0x60>)
 800262c:	429a      	cmp	r2, r3
 800262e:	d80f      	bhi.n	8002650 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <DMA_CalcBaseAndBitshift+0x64>)
 8002638:	4413      	add	r3, r2
 800263a:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <DMA_CalcBaseAndBitshift+0x68>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	009a      	lsls	r2, r3, #2
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0f      	ldr	r2, [pc, #60]	@ (8002688 <DMA_CalcBaseAndBitshift+0x6c>)
 800264c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800264e:	e00e      	b.n	800266e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <DMA_CalcBaseAndBitshift+0x70>)
 8002658:	4413      	add	r3, r2
 800265a:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <DMA_CalcBaseAndBitshift+0x68>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a09      	ldr	r2, [pc, #36]	@ (8002690 <DMA_CalcBaseAndBitshift+0x74>)
 800266c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40020407 	.word	0x40020407
 8002680:	bffdfff8 	.word	0xbffdfff8
 8002684:	cccccccd 	.word	0xcccccccd
 8002688:	40020000 	.word	0x40020000
 800268c:	bffdfbf8 	.word	0xbffdfbf8
 8002690:	40020400 	.word	0x40020400

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	e160      	b.n	8002966 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8152 	beq.w	8002960 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d005      	beq.n	80026d4 <HAL_GPIO_Init+0x40>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d130      	bne.n	8002736 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	2203      	movs	r2, #3
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270a:	2201      	movs	r2, #1
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 0201 	and.w	r2, r3, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b03      	cmp	r3, #3
 8002740:	d017      	beq.n	8002772 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d123      	bne.n	80027c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	08da      	lsrs	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3208      	adds	r2, #8
 8002786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	220f      	movs	r2, #15
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3208      	adds	r2, #8
 80027c0:	6939      	ldr	r1, [r7, #16]
 80027c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0203 	and.w	r2, r3, #3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80ac 	beq.w	8002960 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002808:	4b5e      	ldr	r3, [pc, #376]	@ (8002984 <HAL_GPIO_Init+0x2f0>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a5d      	ldr	r2, [pc, #372]	@ (8002984 <HAL_GPIO_Init+0x2f0>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b5b      	ldr	r3, [pc, #364]	@ (8002984 <HAL_GPIO_Init+0x2f0>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002820:	4a59      	ldr	r2, [pc, #356]	@ (8002988 <HAL_GPIO_Init+0x2f4>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800284a:	d025      	beq.n	8002898 <HAL_GPIO_Init+0x204>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a4f      	ldr	r2, [pc, #316]	@ (800298c <HAL_GPIO_Init+0x2f8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d01f      	beq.n	8002894 <HAL_GPIO_Init+0x200>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a4e      	ldr	r2, [pc, #312]	@ (8002990 <HAL_GPIO_Init+0x2fc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d019      	beq.n	8002890 <HAL_GPIO_Init+0x1fc>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a4d      	ldr	r2, [pc, #308]	@ (8002994 <HAL_GPIO_Init+0x300>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d013      	beq.n	800288c <HAL_GPIO_Init+0x1f8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a4c      	ldr	r2, [pc, #304]	@ (8002998 <HAL_GPIO_Init+0x304>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00d      	beq.n	8002888 <HAL_GPIO_Init+0x1f4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a4b      	ldr	r2, [pc, #300]	@ (800299c <HAL_GPIO_Init+0x308>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d007      	beq.n	8002884 <HAL_GPIO_Init+0x1f0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a4a      	ldr	r2, [pc, #296]	@ (80029a0 <HAL_GPIO_Init+0x30c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_GPIO_Init+0x1ec>
 800287c:	2306      	movs	r3, #6
 800287e:	e00c      	b.n	800289a <HAL_GPIO_Init+0x206>
 8002880:	2307      	movs	r3, #7
 8002882:	e00a      	b.n	800289a <HAL_GPIO_Init+0x206>
 8002884:	2305      	movs	r3, #5
 8002886:	e008      	b.n	800289a <HAL_GPIO_Init+0x206>
 8002888:	2304      	movs	r3, #4
 800288a:	e006      	b.n	800289a <HAL_GPIO_Init+0x206>
 800288c:	2303      	movs	r3, #3
 800288e:	e004      	b.n	800289a <HAL_GPIO_Init+0x206>
 8002890:	2302      	movs	r3, #2
 8002892:	e002      	b.n	800289a <HAL_GPIO_Init+0x206>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_GPIO_Init+0x206>
 8002898:	2300      	movs	r3, #0
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	f002 0203 	and.w	r2, r2, #3
 80028a0:	0092      	lsls	r2, r2, #2
 80028a2:	4093      	lsls	r3, r2
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028aa:	4937      	ldr	r1, [pc, #220]	@ (8002988 <HAL_GPIO_Init+0x2f4>)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b8:	4b3a      	ldr	r3, [pc, #232]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028dc:	4a31      	ldr	r2, [pc, #196]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e2:	4b30      	ldr	r3, [pc, #192]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002906:	4a27      	ldr	r2, [pc, #156]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800290c:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43db      	mvns	r3, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002930:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800295a:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3301      	adds	r3, #1
 8002964:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	f47f ae97 	bne.w	80026a4 <HAL_GPIO_Init+0x10>
  }
}
 8002976:	bf00      	nop
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40021000 	.word	0x40021000
 8002988:	40010000 	.word	0x40010000
 800298c:	48000400 	.word	0x48000400
 8002990:	48000800 	.word	0x48000800
 8002994:	48000c00 	.word	0x48000c00
 8002998:	48001000 	.word	0x48001000
 800299c:	48001400 	.word	0x48001400
 80029a0:	48001800 	.word	0x48001800
 80029a4:	40010400 	.word	0x40010400

080029a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
 80029b4:	4613      	mov	r3, r2
 80029b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b8:	787b      	ldrb	r3, [r7, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4013      	ands	r3, r2
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	43d9      	mvns	r1, r3
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	400b      	ands	r3, r1
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a16:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a22:	4a05      	ldr	r2, [pc, #20]	@ (8002a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fd12 	bl	8000454 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40010400 	.word	0x40010400

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f001 b80a 	b.w	8003a76 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8161 	beq.w	8002d3a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a78:	4bae      	ldr	r3, [pc, #696]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d00c      	beq.n	8002a9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a84:	4bab      	ldr	r3, [pc, #684]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x104>
 8002a90:	4ba8      	ldr	r3, [pc, #672]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9c:	d150      	bne.n	8002b40 <HAL_RCC_OscConfig+0x104>
 8002a9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aa2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ab2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002abe:	d802      	bhi.n	8002ac6 <HAL_RCC_OscConfig+0x8a>
 8002ac0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0xb6>
 8002ac6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aca:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002ada:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ade:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002ae2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002aee:	4b91      	ldr	r3, [pc, #580]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002af6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002afa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002b06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8108 	beq.w	8002d38 <HAL_RCC_OscConfig+0x2fc>
 8002b28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f040 80ff 	bne.w	8002d38 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f000 bf9b 	b.w	8003a76 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b50:	d106      	bne.n	8002b60 <HAL_RCC_OscConfig+0x124>
 8002b52:	4b78      	ldr	r3, [pc, #480]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a77      	ldr	r2, [pc, #476]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e036      	b.n	8002bce <HAL_RCC_OscConfig+0x192>
 8002b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x14e>
 8002b70:	4b70      	ldr	r3, [pc, #448]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a6f      	ldr	r2, [pc, #444]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a6c      	ldr	r2, [pc, #432]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e021      	b.n	8002bce <HAL_RCC_OscConfig+0x192>
 8002b8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x17a>
 8002b9c:	4b65      	ldr	r3, [pc, #404]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a64      	ldr	r2, [pc, #400]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002ba2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	4b62      	ldr	r3, [pc, #392]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a61      	ldr	r2, [pc, #388]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e00b      	b.n	8002bce <HAL_RCC_OscConfig+0x192>
 8002bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5e      	ldr	r2, [pc, #376]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d054      	beq.n	8002c88 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe f917 	bl	8000e10 <HAL_GetTick>
 8002be2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe f912 	bl	8000e10 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b64      	cmp	r3, #100	@ 0x64
 8002bf6:	d902      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	f000 bf3c 	b.w	8003a76 <HAL_RCC_OscConfig+0x103a>
 8002bfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c02:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002c12:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c1e:	d802      	bhi.n	8002c26 <HAL_RCC_OscConfig+0x1ea>
 8002c20:	4b44      	ldr	r3, [pc, #272]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	e015      	b.n	8002c52 <HAL_RCC_OscConfig+0x216>
 8002c26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c2a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002c3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c3e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002c42:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002c4e:	4b39      	ldr	r3, [pc, #228]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c56:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002c5a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002c66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002c6a:	fab2 f282 	clz	r2, r2
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	f042 0220 	orr.w	r2, r2, #32
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	f002 021f 	and.w	r2, r2, #31
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0b0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x1ac>
 8002c86:	e058      	b.n	8002d3a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe f8c2 	bl	8000e10 <HAL_GetTick>
 8002c8c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c92:	f7fe f8bd 	bl	8000e10 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ca0:	d902      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	f000 bee7 	b.w	8003a76 <HAL_RCC_OscConfig+0x103a>
 8002ca8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cac:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002cbc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cc8:	d802      	bhi.n	8002cd0 <HAL_RCC_OscConfig+0x294>
 8002cca:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e015      	b.n	8002cfc <HAL_RCC_OscConfig+0x2c0>
 8002cd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cd4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002ce4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ce8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002cec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d34 <HAL_RCC_OscConfig+0x2f8>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d00:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002d04:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002d08:	fa92 f2a2 	rbit	r2, r2
 8002d0c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002d10:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002d14:	fab2 f282 	clz	r2, r2
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f042 0220 	orr.w	r2, r2, #32
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f002 021f 	and.w	r2, r2, #31
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1b0      	bne.n	8002c92 <HAL_RCC_OscConfig+0x256>
 8002d30:	e003      	b.n	8002d3a <HAL_RCC_OscConfig+0x2fe>
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 816d 	beq.w	800302a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d50:	4bcd      	ldr	r3, [pc, #820]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00c      	beq.n	8002d76 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d5c:	4bca      	ldr	r3, [pc, #808]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d16e      	bne.n	8002e46 <HAL_RCC_OscConfig+0x40a>
 8002d68:	4bc7      	ldr	r3, [pc, #796]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d74:	d167      	bne.n	8002e46 <HAL_RCC_OscConfig+0x40a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002d88:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d94:	d802      	bhi.n	8002d9c <HAL_RCC_OscConfig+0x360>
 8002d96:	4bbc      	ldr	r3, [pc, #752]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e013      	b.n	8002dc4 <HAL_RCC_OscConfig+0x388>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002dae:	2302      	movs	r3, #2
 8002db0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002db4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002dc0:	4bb1      	ldr	r3, [pc, #708]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002dca:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002dce:	fa92 f2a2 	rbit	r2, r2
 8002dd2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002dd6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002dda:	fab2 f282 	clz	r2, r2
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f042 0220 	orr.w	r2, r2, #32
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	f002 021f 	and.w	r2, r2, #31
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCC_OscConfig+0x3d0>
 8002df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f000 be35 	b.w	8003a76 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b9e      	ldr	r3, [pc, #632]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	21f8      	movs	r1, #248	@ 0xf8
 8002e22:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002e2a:	fa91 f1a1 	rbit	r1, r1
 8002e2e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002e32:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002e36:	fab1 f181 	clz	r1, r1
 8002e3a:	b2c9      	uxtb	r1, r1
 8002e3c:	408b      	lsls	r3, r1
 8002e3e:	4992      	ldr	r1, [pc, #584]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e44:	e0f1      	b.n	800302a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8083 	beq.w	8002f5e <HAL_RCC_OscConfig+0x522>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002e6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2301      	movs	r3, #1
 8002e82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fd ffc4 	bl	8000e10 <HAL_GetTick>
 8002e88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fd ffbf 	bl	8000e10 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d902      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	f000 bde9 	b.w	8003a76 <HAL_RCC_OscConfig+0x103a>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002eb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ec2:	d802      	bhi.n	8002eca <HAL_RCC_OscConfig+0x48e>
 8002ec4:	4b70      	ldr	r3, [pc, #448]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	e013      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4b6>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002edc:	2302      	movs	r3, #2
 8002ede:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ee2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002eee:	4b66      	ldr	r3, [pc, #408]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002ef8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002efc:	fa92 f2a2 	rbit	r2, r2
 8002f00:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002f04:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	f042 0220 	orr.w	r2, r2, #32
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f002 021f 	and.w	r2, r2, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0b4      	beq.n	8002e8e <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b58      	ldr	r3, [pc, #352]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	21f8      	movs	r1, #248	@ 0xf8
 8002f3a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002f42:	fa91 f1a1 	rbit	r1, r1
 8002f46:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002f4a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002f4e:	fab1 f181 	clz	r1, r1
 8002f52:	b2c9      	uxtb	r1, r1
 8002f54:	408b      	lsls	r3, r1
 8002f56:	494c      	ldr	r1, [pc, #304]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
 8002f5c:	e065      	b.n	800302a <HAL_RCC_OscConfig+0x5ee>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002f70:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f7e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	461a      	mov	r2, r3
 8002f86:	2300      	movs	r3, #0
 8002f88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fd ff41 	bl	8000e10 <HAL_GetTick>
 8002f8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f94:	f7fd ff3c 	bl	8000e10 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d902      	bls.n	8002faa <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	f000 bd66 	b.w	8003a76 <HAL_RCC_OscConfig+0x103a>
 8002faa:	2302      	movs	r3, #2
 8002fac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fc8:	d802      	bhi.n	8002fd0 <HAL_RCC_OscConfig+0x594>
 8002fca:	4b2f      	ldr	r3, [pc, #188]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	e013      	b.n	8002ff8 <HAL_RCC_OscConfig+0x5bc>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fe8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ff4:	4b24      	ldr	r3, [pc, #144]	@ (8003088 <HAL_RCC_OscConfig+0x64c>)
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002ffe:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003002:	fa92 f2a2 	rbit	r2, r2
 8003006:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800300a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800300e:	fab2 f282 	clz	r2, r2
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	f042 0220 	orr.w	r2, r2, #32
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	f002 021f 	and.w	r2, r2, #31
 800301e:	2101      	movs	r1, #1
 8003020:	fa01 f202 	lsl.w	r2, r1, r2
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1b4      	bne.n	8002f94 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800302e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8119 	beq.w	8003272 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003044:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8082 	beq.w	8003156 <HAL_RCC_OscConfig+0x71a>
 8003052:	2301      	movs	r3, #1
 8003054:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003064:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	4b06      	ldr	r3, [pc, #24]	@ (800308c <HAL_RCC_OscConfig+0x650>)
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	461a      	mov	r2, r3
 8003078:	2301      	movs	r3, #1
 800307a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307c:	f7fd fec8 	bl	8000e10 <HAL_GetTick>
 8003080:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003084:	e00f      	b.n	80030a6 <HAL_RCC_OscConfig+0x66a>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003090:	f7fd febe 	bl	8000e10 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d902      	bls.n	80030a6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f000 bce8 	b.w	8003a76 <HAL_RCC_OscConfig+0x103a>
 80030a6:	2302      	movs	r3, #2
 80030a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030b0:	fa93 f2a3 	rbit	r2, r3
 80030b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030c6:	2202      	movs	r2, #2
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f2a3 	rbit	r2, r3
 80030d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030ea:	2202      	movs	r2, #2
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003100:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003104:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	4bb0      	ldr	r3, [pc, #704]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800310a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800310e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003112:	2102      	movs	r1, #2
 8003114:	6019      	str	r1, [r3, #0]
 8003116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f1a3 	rbit	r1, r3
 8003124:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003128:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800312c:	6019      	str	r1, [r3, #0]
  return result;
 800312e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003132:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d09d      	beq.n	8003090 <HAL_RCC_OscConfig+0x654>
 8003154:	e08d      	b.n	8003272 <HAL_RCC_OscConfig+0x836>
 8003156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800315a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003166:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003174:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003178:	601a      	str	r2, [r3, #0]
  return result;
 800317a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003182:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	4b8f      	ldr	r3, [pc, #572]	@ (80033cc <HAL_RCC_OscConfig+0x990>)
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	461a      	mov	r2, r3
 8003194:	2300      	movs	r3, #0
 8003196:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003198:	f7fd fe3a 	bl	8000e10 <HAL_GetTick>
 800319c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a2:	f7fd fe35 	bl	8000e10 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d902      	bls.n	80031b8 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	f000 bc5f 	b.w	8003a76 <HAL_RCC_OscConfig+0x103a>
 80031b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	fa93 f2a3 	rbit	r2, r3
 80031d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80031e4:	2202      	movs	r2, #2
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003204:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003210:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003222:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	4b68      	ldr	r3, [pc, #416]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003226:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003230:	2102      	movs	r1, #2
 8003232:	6019      	str	r1, [r3, #0]
 8003234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003238:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	fa93 f1a3 	rbit	r1, r3
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800324a:	6019      	str	r1, [r3, #0]
  return result;
 800324c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003250:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d197      	bne.n	80031a2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003276:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 819c 	beq.w	80035c0 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328e:	4b4e      	ldr	r3, [pc, #312]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	4b4b      	ldr	r3, [pc, #300]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	4a4a      	ldr	r2, [pc, #296]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a4:	61d3      	str	r3, [r2, #28]
 80032a6:	4b48      	ldr	r3, [pc, #288]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80032ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <HAL_RCC_OscConfig+0x994>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d11a      	bne.n	800330a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d4:	4b3e      	ldr	r3, [pc, #248]	@ (80033d0 <HAL_RCC_OscConfig+0x994>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a3d      	ldr	r2, [pc, #244]	@ (80033d0 <HAL_RCC_OscConfig+0x994>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e0:	f7fd fd96 	bl	8000e10 <HAL_GetTick>
 80032e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e009      	b.n	80032fe <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fd fd91 	bl	8000e10 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	@ 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e3bb      	b.n	8003a76 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b34      	ldr	r3, [pc, #208]	@ (80033d0 <HAL_RCC_OscConfig+0x994>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ef      	beq.n	80032ea <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x8ec>
 800331a:	4b2b      	ldr	r3, [pc, #172]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a2a      	ldr	r2, [pc, #168]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	e035      	b.n	8003394 <HAL_RCC_OscConfig+0x958>
 8003328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800332c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10c      	bne.n	8003352 <HAL_RCC_OscConfig+0x916>
 8003338:	4b23      	ldr	r3, [pc, #140]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a22      	ldr	r2, [pc, #136]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	4b20      	ldr	r3, [pc, #128]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a1f      	ldr	r2, [pc, #124]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e020      	b.n	8003394 <HAL_RCC_OscConfig+0x958>
 8003352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003356:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b05      	cmp	r3, #5
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x940>
 8003362:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a18      	ldr	r2, [pc, #96]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	6213      	str	r3, [r2, #32]
 800336e:	4b16      	ldr	r3, [pc, #88]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6213      	str	r3, [r2, #32]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0x958>
 800337c:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4a11      	ldr	r2, [pc, #68]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	6213      	str	r3, [r2, #32]
 8003388:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a0e      	ldr	r2, [pc, #56]	@ (80033c8 <HAL_RCC_OscConfig+0x98c>)
 800338e:	f023 0304 	bic.w	r3, r3, #4
 8003392:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003398:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8085 	beq.w	80034b0 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fd fd33 	bl	8000e10 <HAL_GetTick>
 80033aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ae:	e011      	b.n	80033d4 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fd fd2e 	bl	8000e10 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d907      	bls.n	80033d4 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e356      	b.n	8003a76 <HAL_RCC_OscConfig+0x103a>
 80033c8:	40021000 	.word	0x40021000
 80033cc:	10908120 	.word	0x10908120
 80033d0:	40007000 	.word	0x40007000
 80033d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80033dc:	2202      	movs	r2, #2
 80033de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	fa93 f2a3 	rbit	r2, r3
 80033ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033f2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003400:	2202      	movs	r2, #2
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003408:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fa93 f2a3 	rbit	r2, r3
 8003412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003416:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800341a:	601a      	str	r2, [r3, #0]
  return result;
 800341c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003420:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003424:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <HAL_RCC_OscConfig+0xa00>
 8003436:	4b98      	ldr	r3, [pc, #608]	@ (8003698 <HAL_RCC_OscConfig+0xc5c>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	e013      	b.n	8003464 <HAL_RCC_OscConfig+0xa28>
 800343c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003440:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003444:	2202      	movs	r2, #2
 8003446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800344c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800345a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	4b8d      	ldr	r3, [pc, #564]	@ (8003698 <HAL_RCC_OscConfig+0xc5c>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003468:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800346c:	2102      	movs	r1, #2
 800346e:	6011      	str	r1, [r2, #0]
 8003470:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003474:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	fa92 f1a2 	rbit	r1, r2
 800347e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003482:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003486:	6011      	str	r1, [r2, #0]
  return result;
 8003488:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800348c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	fab2 f282 	clz	r2, r2
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f002 021f 	and.w	r2, r2, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d080      	beq.n	80033b0 <HAL_RCC_OscConfig+0x974>
 80034ae:	e07d      	b.n	80035ac <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b0:	f7fd fcae 	bl	8000e10 <HAL_GetTick>
 80034b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00b      	b.n	80034d2 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fd fca9 	bl	8000e10 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e2d1      	b.n	8003a76 <HAL_RCC_OscConfig+0x103a>
 80034d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034d6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80034da:	2202      	movs	r2, #2
 80034dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	fa93 f2a3 	rbit	r2, r3
 80034ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034fa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80034fe:	2202      	movs	r2, #2
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003506:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f2a3 	rbit	r2, r3
 8003510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003514:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003518:	601a      	str	r2, [r3, #0]
  return result;
 800351a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003522:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <HAL_RCC_OscConfig+0xafe>
 8003534:	4b58      	ldr	r3, [pc, #352]	@ (8003698 <HAL_RCC_OscConfig+0xc5c>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	e013      	b.n	8003562 <HAL_RCC_OscConfig+0xb26>
 800353a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003542:	2202      	movs	r2, #2
 8003544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800354a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	fa93 f2a3 	rbit	r2, r3
 8003554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003558:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	4b4e      	ldr	r3, [pc, #312]	@ (8003698 <HAL_RCC_OscConfig+0xc5c>)
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003566:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800356a:	2102      	movs	r1, #2
 800356c:	6011      	str	r1, [r2, #0]
 800356e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003572:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	fa92 f1a2 	rbit	r1, r2
 800357c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003580:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003584:	6011      	str	r1, [r2, #0]
  return result;
 8003586:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800358a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	fab2 f282 	clz	r2, r2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f002 021f 	and.w	r2, r2, #31
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d186      	bne.n	80034ba <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035ac:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b38      	ldr	r3, [pc, #224]	@ (8003698 <HAL_RCC_OscConfig+0xc5c>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4a37      	ldr	r2, [pc, #220]	@ (8003698 <HAL_RCC_OscConfig+0xc5c>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8251 	beq.w	8003a74 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d2:	4b31      	ldr	r3, [pc, #196]	@ (8003698 <HAL_RCC_OscConfig+0xc5c>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b08      	cmp	r3, #8
 80035dc:	f000 820f 	beq.w	80039fe <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	f040 8165 	bne.w	80038bc <HAL_RCC_OscConfig+0xe80>
 80035f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80035fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003604:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fa93 f2a3 	rbit	r2, r3
 800360e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003612:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003616:	601a      	str	r2, [r3, #0]
  return result;
 8003618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800361c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003620:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800362c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	461a      	mov	r2, r3
 8003634:	2300      	movs	r3, #0
 8003636:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fd fbea 	bl	8000e10 <HAL_GetTick>
 800363c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003640:	e009      	b.n	8003656 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003642:	f7fd fbe5 	bl	8000e10 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e20f      	b.n	8003a76 <HAL_RCC_OscConfig+0x103a>
 8003656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800365e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003668:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003676:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800367a:	601a      	str	r2, [r3, #0]
  return result;
 800367c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003680:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003684:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b3f      	cmp	r3, #63	@ 0x3f
 800368e:	d805      	bhi.n	800369c <HAL_RCC_OscConfig+0xc60>
 8003690:	4b01      	ldr	r3, [pc, #4]	@ (8003698 <HAL_RCC_OscConfig+0xc5c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	e02a      	b.n	80036ec <HAL_RCC_OscConfig+0xcb0>
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
 800369c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80036a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	fa93 f2a3 	rbit	r2, r3
 80036b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036bc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80036ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	fa93 f2a3 	rbit	r2, r3
 80036de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036e2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	4bca      	ldr	r3, [pc, #808]	@ (8003a14 <HAL_RCC_OscConfig+0xfd8>)
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036f0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80036f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036f8:	6011      	str	r1, [r2, #0]
 80036fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	fa92 f1a2 	rbit	r1, r2
 8003708:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800370c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003710:	6011      	str	r1, [r2, #0]
  return result;
 8003712:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003716:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	fab2 f282 	clz	r2, r2
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f042 0220 	orr.w	r2, r2, #32
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f002 021f 	and.w	r2, r2, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f202 	lsl.w	r2, r1, r2
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d184      	bne.n	8003642 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003738:	4bb6      	ldr	r3, [pc, #728]	@ (8003a14 <HAL_RCC_OscConfig+0xfd8>)
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	f023 020f 	bic.w	r2, r3, #15
 8003740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003744:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	49b1      	ldr	r1, [pc, #708]	@ (8003a14 <HAL_RCC_OscConfig+0xfd8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003752:	4bb0      	ldr	r3, [pc, #704]	@ (8003a14 <HAL_RCC_OscConfig+0xfd8>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800375a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800375e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a19      	ldr	r1, [r3, #32]
 8003766:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	430b      	orrs	r3, r1
 8003774:	49a7      	ldr	r1, [pc, #668]	@ (8003a14 <HAL_RCC_OscConfig+0xfd8>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
 800377a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003782:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800378c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	fa93 f2a3 	rbit	r2, r3
 8003796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800379a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800379e:	601a      	str	r2, [r3, #0]
  return result;
 80037a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80037a8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fd fb26 	bl	8000e10 <HAL_GetTick>
 80037c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c8:	e009      	b.n	80037de <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fd fb21 	bl	8000e10 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e14b      	b.n	8003a76 <HAL_RCC_OscConfig+0x103a>
 80037de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80037e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	fa93 f2a3 	rbit	r2, r3
 80037fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003802:	601a      	str	r2, [r3, #0]
  return result;
 8003804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003808:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800380c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b3f      	cmp	r3, #63	@ 0x3f
 8003816:	d802      	bhi.n	800381e <HAL_RCC_OscConfig+0xde2>
 8003818:	4b7e      	ldr	r3, [pc, #504]	@ (8003a14 <HAL_RCC_OscConfig+0xfd8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	e027      	b.n	800386e <HAL_RCC_OscConfig+0xe32>
 800381e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003822:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800382a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003830:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f2a3 	rbit	r2, r3
 800383a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800383e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003848:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800384c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003856:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	fa93 f2a3 	rbit	r2, r3
 8003860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003864:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <HAL_RCC_OscConfig+0xfd8>)
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003872:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003876:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800387a:	6011      	str	r1, [r2, #0]
 800387c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003880:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	fa92 f1a2 	rbit	r1, r2
 800388a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800388e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003892:	6011      	str	r1, [r2, #0]
  return result;
 8003894:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003898:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	fab2 f282 	clz	r2, r2
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f042 0220 	orr.w	r2, r2, #32
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f002 021f 	and.w	r2, r2, #31
 80038ae:	2101      	movs	r1, #1
 80038b0:	fa01 f202 	lsl.w	r2, r1, r2
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d087      	beq.n	80037ca <HAL_RCC_OscConfig+0xd8e>
 80038ba:	e0db      	b.n	8003a74 <HAL_RCC_OscConfig+0x1038>
 80038bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80038c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	fa93 f2a3 	rbit	r2, r3
 80038d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038dc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80038e0:	601a      	str	r2, [r3, #0]
  return result;
 80038e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80038ea:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ec:	fab3 f383 	clz	r3, r3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	461a      	mov	r2, r3
 80038fe:	2300      	movs	r3, #0
 8003900:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fd fa85 	bl	8000e10 <HAL_GetTick>
 8003906:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390a:	e009      	b.n	8003920 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390c:	f7fd fa80 	bl	8000e10 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e0aa      	b.n	8003a76 <HAL_RCC_OscConfig+0x103a>
 8003920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003924:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003928:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800392c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003932:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	fa93 f2a3 	rbit	r2, r3
 800393c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003940:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003944:	601a      	str	r2, [r3, #0]
  return result;
 8003946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800394a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800394e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003950:	fab3 f383 	clz	r3, r3
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b3f      	cmp	r3, #63	@ 0x3f
 8003958:	d802      	bhi.n	8003960 <HAL_RCC_OscConfig+0xf24>
 800395a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a14 <HAL_RCC_OscConfig+0xfd8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	e027      	b.n	80039b0 <HAL_RCC_OscConfig+0xf74>
 8003960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003964:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003968:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800396c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003972:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	fa93 f2a3 	rbit	r2, r3
 800397c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003980:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800398a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800398e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003998:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fa93 f2a3 	rbit	r2, r3
 80039a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <HAL_RCC_OscConfig+0xfd8>)
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039b4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80039b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039c2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	fa92 f1a2 	rbit	r1, r2
 80039cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039d0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80039d4:	6011      	str	r1, [r2, #0]
  return result;
 80039d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039da:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f042 0220 	orr.w	r2, r2, #32
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f002 021f 	and.w	r2, r2, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d187      	bne.n	800390c <HAL_RCC_OscConfig+0xed0>
 80039fc:	e03a      	b.n	8003a74 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d104      	bne.n	8003a18 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e031      	b.n	8003a76 <HAL_RCC_OscConfig+0x103a>
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a18:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <HAL_RCC_OscConfig+0x1044>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003a20:	4b17      	ldr	r3, [pc, #92]	@ (8003a80 <HAL_RCC_OscConfig+0x1044>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a24:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a2c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003a30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d117      	bne.n	8003a70 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003a40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a44:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d10b      	bne.n	8003a70 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a5c:	f003 020f 	and.w	r2, r3, #15
 8003a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b09e      	sub	sp, #120	@ 0x78
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e154      	b.n	8003d46 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b89      	ldr	r3, [pc, #548]	@ (8003cc4 <HAL_RCC_ClockConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d910      	bls.n	8003acc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b86      	ldr	r3, [pc, #536]	@ (8003cc4 <HAL_RCC_ClockConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	4984      	ldr	r1, [pc, #528]	@ (8003cc4 <HAL_RCC_ClockConfig+0x240>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b82      	ldr	r3, [pc, #520]	@ (8003cc4 <HAL_RCC_ClockConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e13c      	b.n	8003d46 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b7b      	ldr	r3, [pc, #492]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4978      	ldr	r1, [pc, #480]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80cd 	beq.w	8003c92 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d137      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xec>
 8003b00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b04:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b10:	fab3 f383 	clz	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b18:	d802      	bhi.n	8003b20 <HAL_RCC_ClockConfig+0x9c>
 8003b1a:	4b6b      	ldr	r3, [pc, #428]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	e00f      	b.n	8003b40 <HAL_RCC_ClockConfig+0xbc>
 8003b20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b28:	fa93 f3a3 	rbit	r3, r3
 8003b2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b32:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b3c:	4b62      	ldr	r3, [pc, #392]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b44:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b48:	fa92 f2a2 	rbit	r2, r2
 8003b4c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003b4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b50:	fab2 f282 	clz	r2, r2
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f042 0220 	orr.w	r2, r2, #32
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f002 021f 	and.w	r2, r2, #31
 8003b60:	2101      	movs	r1, #1
 8003b62:	fa01 f202 	lsl.w	r2, r1, r2
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d171      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0ea      	b.n	8003d46 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d137      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x164>
 8003b78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b7c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b88:	fab3 f383 	clz	r3, r3
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b90:	d802      	bhi.n	8003b98 <HAL_RCC_ClockConfig+0x114>
 8003b92:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	e00f      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x134>
 8003b98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003baa:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bb4:	4b44      	ldr	r3, [pc, #272]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bbc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003bbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bc0:	fa92 f2a2 	rbit	r2, r2
 8003bc4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003bc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bc8:	fab2 f282 	clz	r2, r2
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	f042 0220 	orr.w	r2, r2, #32
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	f002 021f 	and.w	r2, r2, #31
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d135      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0ae      	b.n	8003d46 <HAL_RCC_ClockConfig+0x2c2>
 8003be8:	2302      	movs	r3, #2
 8003bea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bfe:	d802      	bhi.n	8003c06 <HAL_RCC_ClockConfig+0x182>
 8003c00:	4b31      	ldr	r3, [pc, #196]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	e00d      	b.n	8003c22 <HAL_RCC_ClockConfig+0x19e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c12:	2302      	movs	r3, #2
 8003c14:	623b      	str	r3, [r7, #32]
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	2202      	movs	r2, #2
 8003c24:	61ba      	str	r2, [r7, #24]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	fa92 f2a2 	rbit	r2, r2
 8003c2c:	617a      	str	r2, [r7, #20]
  return result;
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	fab2 f282 	clz	r2, r2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f042 0220 	orr.w	r2, r2, #32
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f002 021f 	and.w	r2, r2, #31
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f202 	lsl.w	r2, r1, r2
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e07a      	b.n	8003d46 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c50:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 0203 	bic.w	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	491a      	ldr	r1, [pc, #104]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c62:	f7fd f8d5 	bl	8000e10 <HAL_GetTick>
 8003c66:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6a:	f7fd f8d1 	bl	8000e10 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e062      	b.n	8003d46 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c80:	4b11      	ldr	r3, [pc, #68]	@ (8003cc8 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 020c 	and.w	r2, r3, #12
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d1eb      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c92:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <HAL_RCC_ClockConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d215      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca0:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <HAL_RCC_ClockConfig+0x240>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 0207 	bic.w	r2, r3, #7
 8003ca8:	4906      	ldr	r1, [pc, #24]	@ (8003cc4 <HAL_RCC_ClockConfig+0x240>)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb0:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <HAL_RCC_ClockConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d006      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e041      	b.n	8003d46 <HAL_RCC_ClockConfig+0x2c2>
 8003cc2:	bf00      	nop
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d50 <HAL_RCC_ClockConfig+0x2cc>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	491a      	ldr	r1, [pc, #104]	@ (8003d50 <HAL_RCC_ClockConfig+0x2cc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf6:	4b16      	ldr	r3, [pc, #88]	@ (8003d50 <HAL_RCC_ClockConfig+0x2cc>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4912      	ldr	r1, [pc, #72]	@ (8003d50 <HAL_RCC_ClockConfig+0x2cc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d0a:	f000 f829 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d0e:	4601      	mov	r1, r0
 8003d10:	4b0f      	ldr	r3, [pc, #60]	@ (8003d50 <HAL_RCC_ClockConfig+0x2cc>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d18:	22f0      	movs	r2, #240	@ 0xf0
 8003d1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	fa92 f2a2 	rbit	r2, r2
 8003d22:	60fa      	str	r2, [r7, #12]
  return result;
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	fab2 f282 	clz	r2, r2
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	40d3      	lsrs	r3, r2
 8003d2e:	4a09      	ldr	r2, [pc, #36]	@ (8003d54 <HAL_RCC_ClockConfig+0x2d0>)
 8003d30:	5cd3      	ldrb	r3, [r2, r3]
 8003d32:	fa21 f303 	lsr.w	r3, r1, r3
 8003d36:	4a08      	ldr	r2, [pc, #32]	@ (8003d58 <HAL_RCC_ClockConfig+0x2d4>)
 8003d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d3a:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <HAL_RCC_ClockConfig+0x2d8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd f822 	bl	8000d88 <HAL_InitTick>
  
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3778      	adds	r7, #120	@ 0x78
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08005e04 	.word	0x08005e04
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	20000004 	.word	0x20000004

08003d60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d002      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x30>
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x36>
 8003d8e:	e029      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d92:	613b      	str	r3, [r7, #16]
      break;
 8003d94:	e029      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	0c9b      	lsrs	r3, r3, #18
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	4a18      	ldr	r2, [pc, #96]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003da0:	5cd3      	ldrb	r3, [r2, r3]
 8003da2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003da4:	4b14      	ldr	r3, [pc, #80]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	4a15      	ldr	r2, [pc, #84]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e007      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dce:	4a0b      	ldr	r2, [pc, #44]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	fb02 f303 	mul.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	613b      	str	r3, [r7, #16]
      break;
 8003de2:	e002      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003de6:	613b      	str	r3, [r7, #16]
      break;
 8003de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dea:	693b      	ldr	r3, [r7, #16]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	007a1200 	.word	0x007a1200
 8003e00:	08005e1c 	.word	0x08005e1c
 8003e04:	08005e2c 	.word	0x08005e2c

08003e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	@ (8003e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000000 	.word	0x20000000

08003e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e26:	f7ff ffef 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e34:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003e38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	fa92 f2a2 	rbit	r2, r2
 8003e40:	603a      	str	r2, [r7, #0]
  return result;
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	fab2 f282 	clz	r2, r2
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	40d3      	lsrs	r3, r2
 8003e4c:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08005e14 	.word	0x08005e14

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e6a:	f7ff ffcd 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e6e:	4601      	mov	r1, r0
 8003e70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003e78:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003e7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	fa92 f2a2 	rbit	r2, r2
 8003e84:	603a      	str	r2, [r7, #0]
  return result;
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	fab2 f282 	clz	r2, r2
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	40d3      	lsrs	r3, r2
 8003e90:	4a04      	ldr	r2, [pc, #16]	@ (8003ea4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	08005e14 	.word	0x08005e14

08003ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b092      	sub	sp, #72	@ 0x48
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80d2 	beq.w	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	4a49      	ldr	r2, [pc, #292]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ee2:	61d3      	str	r3, [r2, #28]
 8003ee4:	4b47      	ldr	r3, [pc, #284]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef6:	4b44      	ldr	r3, [pc, #272]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d118      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a40      	ldr	r2, [pc, #256]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0e:	f7fc ff7f 	bl	8000e10 <HAL_GetTick>
 8003f12:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f16:	f7fc ff7b 	bl	8000e10 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b64      	cmp	r3, #100	@ 0x64
 8003f22:	d901      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1d4      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f28:	4b37      	ldr	r3, [pc, #220]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f34:	4b33      	ldr	r3, [pc, #204]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8082 	beq.w	800404a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d07a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f54:	4b2b      	ldr	r3, [pc, #172]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	4b25      	ldr	r3, [pc, #148]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2301      	movs	r3, #1
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fa6:	4a17      	ldr	r2, [pc, #92]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003faa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d049      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fc ff2b 	bl	8000e10 <HAL_GetTick>
 8003fba:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fc ff27 	bl	8000e10 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e17e      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	fa93 f3a3 	rbit	r3, r3
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	61fb      	str	r3, [r7, #28]
  return result;
 8003fec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	fab3 f383 	clz	r3, r3
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003ffe:	4b01      	ldr	r3, [pc, #4]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	e00d      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004004:	40021000 	.word	0x40021000
 8004008:	40007000 	.word	0x40007000
 800400c:	10908100 	.word	0x10908100
 8004010:	2302      	movs	r3, #2
 8004012:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	4b9a      	ldr	r3, [pc, #616]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	2202      	movs	r2, #2
 8004022:	613a      	str	r2, [r7, #16]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	fa92 f2a2 	rbit	r2, r2
 800402a:	60fa      	str	r2, [r7, #12]
  return result;
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	fab2 f282 	clz	r2, r2
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	f002 021f 	and.w	r2, r2, #31
 800403e:	2101      	movs	r1, #1
 8004040:	fa01 f202 	lsl.w	r2, r1, r2
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0b9      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800404a:	4b8f      	ldr	r3, [pc, #572]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	498c      	ldr	r1, [pc, #560]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800405c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4b88      	ldr	r3, [pc, #544]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	4a87      	ldr	r2, [pc, #540]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800407c:	4b82      	ldr	r3, [pc, #520]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	f023 0203 	bic.w	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	497f      	ldr	r1, [pc, #508]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800409a:	4b7b      	ldr	r3, [pc, #492]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	4978      	ldr	r1, [pc, #480]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040b8:	4b73      	ldr	r3, [pc, #460]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	4970      	ldr	r1, [pc, #448]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	f023 0210 	bic.w	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4969      	ldr	r1, [pc, #420]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80040f4:	4b64      	ldr	r3, [pc, #400]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004100:	4961      	ldr	r1, [pc, #388]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004112:	4b5d      	ldr	r3, [pc, #372]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	f023 0220 	bic.w	r2, r3, #32
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	495a      	ldr	r1, [pc, #360]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004130:	4b55      	ldr	r3, [pc, #340]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	4952      	ldr	r1, [pc, #328]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800414e:	4b4e      	ldr	r3, [pc, #312]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	494b      	ldr	r1, [pc, #300]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800416c:	4b46      	ldr	r3, [pc, #280]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	4943      	ldr	r1, [pc, #268]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800418a:	4b3f      	ldr	r3, [pc, #252]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004196:	493c      	ldr	r1, [pc, #240]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041a8:	4b37      	ldr	r3, [pc, #220]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	4934      	ldr	r1, [pc, #208]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80041c6:	4b30      	ldr	r3, [pc, #192]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	492d      	ldr	r1, [pc, #180]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041e4:	4b28      	ldr	r3, [pc, #160]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f0:	4925      	ldr	r1, [pc, #148]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004202:	4b21      	ldr	r3, [pc, #132]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	491e      	ldr	r1, [pc, #120]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004220:	4b19      	ldr	r3, [pc, #100]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	4916      	ldr	r1, [pc, #88]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800423e:	4b12      	ldr	r3, [pc, #72]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004242:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424a:	490f      	ldr	r1, [pc, #60]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800425c:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004260:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	4907      	ldr	r1, [pc, #28]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00c      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800427a:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	e002      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800428e:	4913      	ldr	r1, [pc, #76]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004290:	4313      	orrs	r3, r2
 8004292:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80042a0:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ac:	490b      	ldr	r1, [pc, #44]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80042be:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ca:	4904      	ldr	r1, [pc, #16]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3748      	adds	r7, #72	@ 0x48
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000

080042e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e049      	b.n	8004386 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fbf8 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 f9d0 	bl	80046c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e04f      	b.n	8004448 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a23      	ldr	r2, [pc, #140]	@ (8004454 <HAL_TIM_Base_Start_IT+0xc4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01d      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x76>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d2:	d018      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x76>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <HAL_TIM_Base_Start_IT+0xc8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x76>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1e      	ldr	r2, [pc, #120]	@ (800445c <HAL_TIM_Base_Start_IT+0xcc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x76>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004460 <HAL_TIM_Base_Start_IT+0xd0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x76>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004464 <HAL_TIM_Base_Start_IT+0xd4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x76>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a19      	ldr	r2, [pc, #100]	@ (8004468 <HAL_TIM_Base_Start_IT+0xd8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d115      	bne.n	8004432 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	4b17      	ldr	r3, [pc, #92]	@ (800446c <HAL_TIM_Base_Start_IT+0xdc>)
 800440e:	4013      	ands	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b06      	cmp	r3, #6
 8004416:	d015      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0xb4>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800441e:	d011      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004430:	e008      	b.n	8004444 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e000      	b.n	8004446 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004444:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40013400 	.word	0x40013400
 8004464:	40014000 	.word	0x40014000
 8004468:	40015000 	.word	0x40015000
 800446c:	00010007 	.word	0x00010007

08004470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0202 	mvn.w	r2, #2
 80044a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8e4 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8d6 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f8e7 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0204 	mvn.w	r2, #4
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8be 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8b0 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f8c1 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d020      	beq.n	800456c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01b      	beq.n	800456c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0208 	mvn.w	r2, #8
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2204      	movs	r2, #4
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f898 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f88a 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f89b 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	d020      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0210 	mvn.w	r2, #16
 8004588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2208      	movs	r2, #8
 800458e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f872 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f864 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f875 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0201 	mvn.w	r2, #1
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fb ff12 	bl	8000400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f9a2 	bl	8004944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f99a 	bl	8004958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f834 	bl	80046b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0220 	mvn.w	r2, #32
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f962 	bl	8004930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a48      	ldr	r2, [pc, #288]	@ (80047f8 <TIM_Base_SetConfig+0x134>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e2:	d00f      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a45      	ldr	r2, [pc, #276]	@ (80047fc <TIM_Base_SetConfig+0x138>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00b      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a44      	ldr	r2, [pc, #272]	@ (8004800 <TIM_Base_SetConfig+0x13c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d007      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a43      	ldr	r2, [pc, #268]	@ (8004804 <TIM_Base_SetConfig+0x140>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d003      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a42      	ldr	r2, [pc, #264]	@ (8004808 <TIM_Base_SetConfig+0x144>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a37      	ldr	r2, [pc, #220]	@ (80047f8 <TIM_Base_SetConfig+0x134>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01f      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004724:	d01b      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a34      	ldr	r2, [pc, #208]	@ (80047fc <TIM_Base_SetConfig+0x138>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d017      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a33      	ldr	r2, [pc, #204]	@ (8004800 <TIM_Base_SetConfig+0x13c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a32      	ldr	r2, [pc, #200]	@ (8004804 <TIM_Base_SetConfig+0x140>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00f      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a32      	ldr	r2, [pc, #200]	@ (800480c <TIM_Base_SetConfig+0x148>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a31      	ldr	r2, [pc, #196]	@ (8004810 <TIM_Base_SetConfig+0x14c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a30      	ldr	r2, [pc, #192]	@ (8004814 <TIM_Base_SetConfig+0x150>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2b      	ldr	r2, [pc, #172]	@ (8004808 <TIM_Base_SetConfig+0x144>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d108      	bne.n	8004770 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a18      	ldr	r2, [pc, #96]	@ (80047f8 <TIM_Base_SetConfig+0x134>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <TIM_Base_SetConfig+0x100>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a19      	ldr	r2, [pc, #100]	@ (8004804 <TIM_Base_SetConfig+0x140>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00f      	beq.n	80047c4 <TIM_Base_SetConfig+0x100>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a19      	ldr	r2, [pc, #100]	@ (800480c <TIM_Base_SetConfig+0x148>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00b      	beq.n	80047c4 <TIM_Base_SetConfig+0x100>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <TIM_Base_SetConfig+0x14c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d007      	beq.n	80047c4 <TIM_Base_SetConfig+0x100>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a17      	ldr	r2, [pc, #92]	@ (8004814 <TIM_Base_SetConfig+0x150>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_Base_SetConfig+0x100>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a12      	ldr	r2, [pc, #72]	@ (8004808 <TIM_Base_SetConfig+0x144>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d103      	bne.n	80047cc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	611a      	str	r2, [r3, #16]
  }
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40013400 	.word	0x40013400
 8004808:	40015000 	.word	0x40015000
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800

08004818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800482c:	2302      	movs	r3, #2
 800482e:	e06d      	b.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a30      	ldr	r2, [pc, #192]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2f      	ldr	r2, [pc, #188]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2d      	ldr	r2, [pc, #180]	@ (8004920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004874:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1e      	ldr	r2, [pc, #120]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d01d      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ac:	d018      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004924 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004928 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a15      	ldr	r2, [pc, #84]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a16      	ldr	r2, [pc, #88]	@ (800492c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a11      	ldr	r2, [pc, #68]	@ (8004920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10c      	bne.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400
 8004920:	40015000 	.word	0x40015000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40014000 	.word	0x40014000

08004930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e040      	b.n	8004a00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fc f8da 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2224      	movs	r2, #36	@ 0x24
 8004998:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0201 	bic.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa86 	bl	8004ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f8af 	bl	8004b1c <UART_SetConfig>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e01b      	b.n	8004a00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fb05 	bl	8005008 <UART_CheckIdleState>
 80049fe:	4603      	mov	r3, r0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	@ 0x28
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d177      	bne.n	8004b10 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_UART_Transmit+0x24>
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e070      	b.n	8004b12 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2221      	movs	r2, #33	@ 0x21
 8004a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a3e:	f7fc f9e7 	bl	8000e10 <HAL_GetTick>
 8004a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
 8004a50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5c:	d108      	bne.n	8004a70 <HAL_UART_Transmit+0x68>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e003      	b.n	8004a78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a78:	e02f      	b.n	8004ada <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2200      	movs	r2, #0
 8004a82:	2180      	movs	r1, #128	@ 0x80
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fb67 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d004      	beq.n	8004a9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e03b      	b.n	8004b12 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	881a      	ldrh	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aac:	b292      	uxth	r2, r2
 8004aae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	3302      	adds	r3, #2
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	e007      	b.n	8004ac8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1c9      	bne.n	8004a7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	2140      	movs	r1, #64	@ 0x40
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fb31 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e005      	b.n	8004b12 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b92      	ldr	r3, [pc, #584]	@ (8004d90 <UART_SetConfig+0x274>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	6979      	ldr	r1, [r7, #20]
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a80      	ldr	r2, [pc, #512]	@ (8004d94 <UART_SetConfig+0x278>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d120      	bne.n	8004bda <UART_SetConfig+0xbe>
 8004b98:	4b7f      	ldr	r3, [pc, #508]	@ (8004d98 <UART_SetConfig+0x27c>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d817      	bhi.n	8004bd4 <UART_SetConfig+0xb8>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <UART_SetConfig+0x90>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bc9 	.word	0x08004bc9
 8004bb4:	08004bcf 	.word	0x08004bcf
 8004bb8:	08004bc3 	.word	0x08004bc3
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e0b5      	b.n	8004d2e <UART_SetConfig+0x212>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e0b2      	b.n	8004d2e <UART_SetConfig+0x212>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e0af      	b.n	8004d2e <UART_SetConfig+0x212>
 8004bce:	2308      	movs	r3, #8
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e0ac      	b.n	8004d2e <UART_SetConfig+0x212>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e0a9      	b.n	8004d2e <UART_SetConfig+0x212>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6f      	ldr	r2, [pc, #444]	@ (8004d9c <UART_SetConfig+0x280>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d124      	bne.n	8004c2e <UART_SetConfig+0x112>
 8004be4:	4b6c      	ldr	r3, [pc, #432]	@ (8004d98 <UART_SetConfig+0x27c>)
 8004be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bf0:	d011      	beq.n	8004c16 <UART_SetConfig+0xfa>
 8004bf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bf6:	d817      	bhi.n	8004c28 <UART_SetConfig+0x10c>
 8004bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bfc:	d011      	beq.n	8004c22 <UART_SetConfig+0x106>
 8004bfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c02:	d811      	bhi.n	8004c28 <UART_SetConfig+0x10c>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <UART_SetConfig+0xf4>
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0c:	d006      	beq.n	8004c1c <UART_SetConfig+0x100>
 8004c0e:	e00b      	b.n	8004c28 <UART_SetConfig+0x10c>
 8004c10:	2300      	movs	r3, #0
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e08b      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c16:	2302      	movs	r3, #2
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e088      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e085      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c22:	2308      	movs	r3, #8
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e082      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e07f      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a5b      	ldr	r2, [pc, #364]	@ (8004da0 <UART_SetConfig+0x284>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d124      	bne.n	8004c82 <UART_SetConfig+0x166>
 8004c38:	4b57      	ldr	r3, [pc, #348]	@ (8004d98 <UART_SetConfig+0x27c>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004c40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c44:	d011      	beq.n	8004c6a <UART_SetConfig+0x14e>
 8004c46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c4a:	d817      	bhi.n	8004c7c <UART_SetConfig+0x160>
 8004c4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c50:	d011      	beq.n	8004c76 <UART_SetConfig+0x15a>
 8004c52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c56:	d811      	bhi.n	8004c7c <UART_SetConfig+0x160>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <UART_SetConfig+0x148>
 8004c5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c60:	d006      	beq.n	8004c70 <UART_SetConfig+0x154>
 8004c62:	e00b      	b.n	8004c7c <UART_SetConfig+0x160>
 8004c64:	2300      	movs	r3, #0
 8004c66:	77fb      	strb	r3, [r7, #31]
 8004c68:	e061      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	77fb      	strb	r3, [r7, #31]
 8004c6e:	e05e      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c70:	2304      	movs	r3, #4
 8004c72:	77fb      	strb	r3, [r7, #31]
 8004c74:	e05b      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c76:	2308      	movs	r3, #8
 8004c78:	77fb      	strb	r3, [r7, #31]
 8004c7a:	e058      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e055      	b.n	8004d2e <UART_SetConfig+0x212>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a47      	ldr	r2, [pc, #284]	@ (8004da4 <UART_SetConfig+0x288>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d124      	bne.n	8004cd6 <UART_SetConfig+0x1ba>
 8004c8c:	4b42      	ldr	r3, [pc, #264]	@ (8004d98 <UART_SetConfig+0x27c>)
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004c94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c98:	d011      	beq.n	8004cbe <UART_SetConfig+0x1a2>
 8004c9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c9e:	d817      	bhi.n	8004cd0 <UART_SetConfig+0x1b4>
 8004ca0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ca4:	d011      	beq.n	8004cca <UART_SetConfig+0x1ae>
 8004ca6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004caa:	d811      	bhi.n	8004cd0 <UART_SetConfig+0x1b4>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <UART_SetConfig+0x19c>
 8004cb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cb4:	d006      	beq.n	8004cc4 <UART_SetConfig+0x1a8>
 8004cb6:	e00b      	b.n	8004cd0 <UART_SetConfig+0x1b4>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e037      	b.n	8004d2e <UART_SetConfig+0x212>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e034      	b.n	8004d2e <UART_SetConfig+0x212>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e031      	b.n	8004d2e <UART_SetConfig+0x212>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e02e      	b.n	8004d2e <UART_SetConfig+0x212>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e02b      	b.n	8004d2e <UART_SetConfig+0x212>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a33      	ldr	r2, [pc, #204]	@ (8004da8 <UART_SetConfig+0x28c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d124      	bne.n	8004d2a <UART_SetConfig+0x20e>
 8004ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d98 <UART_SetConfig+0x27c>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004ce8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cec:	d011      	beq.n	8004d12 <UART_SetConfig+0x1f6>
 8004cee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cf2:	d817      	bhi.n	8004d24 <UART_SetConfig+0x208>
 8004cf4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cf8:	d011      	beq.n	8004d1e <UART_SetConfig+0x202>
 8004cfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cfe:	d811      	bhi.n	8004d24 <UART_SetConfig+0x208>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <UART_SetConfig+0x1f0>
 8004d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d08:	d006      	beq.n	8004d18 <UART_SetConfig+0x1fc>
 8004d0a:	e00b      	b.n	8004d24 <UART_SetConfig+0x208>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e00d      	b.n	8004d2e <UART_SetConfig+0x212>
 8004d12:	2302      	movs	r3, #2
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e00a      	b.n	8004d2e <UART_SetConfig+0x212>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e007      	b.n	8004d2e <UART_SetConfig+0x212>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e004      	b.n	8004d2e <UART_SetConfig+0x212>
 8004d24:	2310      	movs	r3, #16
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e001      	b.n	8004d2e <UART_SetConfig+0x212>
 8004d2a:	2310      	movs	r3, #16
 8004d2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d36:	d16b      	bne.n	8004e10 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004d38:	7ffb      	ldrb	r3, [r7, #31]
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d838      	bhi.n	8004db0 <UART_SetConfig+0x294>
 8004d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <UART_SetConfig+0x228>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d69 	.word	0x08004d69
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	08004d79 	.word	0x08004d79
 8004d50:	08004db1 	.word	0x08004db1
 8004d54:	08004d7f 	.word	0x08004d7f
 8004d58:	08004db1 	.word	0x08004db1
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004db1 	.word	0x08004db1
 8004d64:	08004d87 	.word	0x08004d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d68:	f7ff f85a 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8004d6c:	61b8      	str	r0, [r7, #24]
        break;
 8004d6e:	e024      	b.n	8004dba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d70:	f7ff f878 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 8004d74:	61b8      	str	r0, [r7, #24]
        break;
 8004d76:	e020      	b.n	8004dba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d78:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <UART_SetConfig+0x290>)
 8004d7a:	61bb      	str	r3, [r7, #24]
        break;
 8004d7c:	e01d      	b.n	8004dba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7e:	f7fe ffef 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8004d82:	61b8      	str	r0, [r7, #24]
        break;
 8004d84:	e019      	b.n	8004dba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d8a:	61bb      	str	r3, [r7, #24]
        break;
 8004d8c:	e015      	b.n	8004dba <UART_SetConfig+0x29e>
 8004d8e:	bf00      	nop
 8004d90:	efff69f3 	.word	0xefff69f3
 8004d94:	40013800 	.word	0x40013800
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40004400 	.word	0x40004400
 8004da0:	40004800 	.word	0x40004800
 8004da4:	40004c00 	.word	0x40004c00
 8004da8:	40005000 	.word	0x40005000
 8004dac:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	77bb      	strb	r3, [r7, #30]
        break;
 8004db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d073      	beq.n	8004ea8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	005a      	lsls	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	441a      	add	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b0f      	cmp	r3, #15
 8004dda:	d916      	bls.n	8004e0a <UART_SetConfig+0x2ee>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de2:	d212      	bcs.n	8004e0a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f023 030f 	bic.w	r3, r3, #15
 8004dec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	89fb      	ldrh	r3, [r7, #14]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	89fa      	ldrh	r2, [r7, #14]
 8004e06:	60da      	str	r2, [r3, #12]
 8004e08:	e04e      	b.n	8004ea8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	77bb      	strb	r3, [r7, #30]
 8004e0e:	e04b      	b.n	8004ea8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e10:	7ffb      	ldrb	r3, [r7, #31]
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d827      	bhi.n	8004e66 <UART_SetConfig+0x34a>
 8004e16:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <UART_SetConfig+0x300>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e51 	.word	0x08004e51
 8004e28:	08004e67 	.word	0x08004e67
 8004e2c:	08004e57 	.word	0x08004e57
 8004e30:	08004e67 	.word	0x08004e67
 8004e34:	08004e67 	.word	0x08004e67
 8004e38:	08004e67 	.word	0x08004e67
 8004e3c:	08004e5f 	.word	0x08004e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fe ffee 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8004e44:	61b8      	str	r0, [r7, #24]
        break;
 8004e46:	e013      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7ff f80c 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 8004e4c:	61b8      	str	r0, [r7, #24]
        break;
 8004e4e:	e00f      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e50:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <UART_SetConfig+0x3a4>)
 8004e52:	61bb      	str	r3, [r7, #24]
        break;
 8004e54:	e00c      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fe ff83 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8004e5a:	61b8      	str	r0, [r7, #24]
        break;
 8004e5c:	e008      	b.n	8004e70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e62:	61bb      	str	r3, [r7, #24]
        break;
 8004e64:	e004      	b.n	8004e70 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085a      	lsrs	r2, r3, #1
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	441a      	add	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b0f      	cmp	r3, #15
 8004e8e:	d909      	bls.n	8004ea4 <UART_SetConfig+0x388>
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e96:	d205      	bcs.n	8004ea4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60da      	str	r2, [r3, #12]
 8004ea2:	e001      	b.n	8004ea8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004eb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fc2:	d10a      	bne.n	8004fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b098      	sub	sp, #96	@ 0x60
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005018:	f7fb fefa 	bl	8000e10 <HAL_GetTick>
 800501c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d12e      	bne.n	800508a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f88c 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d021      	beq.n	800508a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800505a:	653b      	str	r3, [r7, #80]	@ 0x50
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005064:	647b      	str	r3, [r7, #68]	@ 0x44
 8005066:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800506a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e062      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d149      	bne.n	800512c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005098:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f856 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03c      	beq.n	800512c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	623b      	str	r3, [r7, #32]
   return(result);
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005104:	61fa      	str	r2, [r7, #28]
 8005106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	69b9      	ldr	r1, [r7, #24]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	617b      	str	r3, [r7, #20]
   return(result);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e011      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3758      	adds	r7, #88	@ 0x58
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	e04f      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005170:	d04b      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005172:	f7fb fe4d 	bl	8000e10 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	429a      	cmp	r2, r3
 8005180:	d302      	bcc.n	8005188 <UART_WaitOnFlagUntilTimeout+0x30>
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e04e      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d037      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b80      	cmp	r3, #128	@ 0x80
 800519e:	d034      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b40      	cmp	r3, #64	@ 0x40
 80051a4:	d031      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d110      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2208      	movs	r2, #8
 80051ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f838 	bl	8005232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2208      	movs	r2, #8
 80051c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e029      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051e4:	d111      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f81e 	bl	8005232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e00f      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	429a      	cmp	r2, r3
 8005226:	d0a0      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005232:	b480      	push	{r7}
 8005234:	b095      	sub	sp, #84	@ 0x54
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800524e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005258:	643b      	str	r3, [r7, #64]	@ 0x40
 800525a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800525e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e6      	bne.n	800523a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	61fb      	str	r3, [r7, #28]
   return(result);
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800528c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800528e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e5      	bne.n	800526c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d118      	bne.n	80052da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f023 0310 	bic.w	r3, r3, #16
 80052bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6979      	ldr	r1, [r7, #20]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	613b      	str	r3, [r7, #16]
   return(result);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052ee:	bf00      	nop
 80052f0:	3754      	adds	r7, #84	@ 0x54
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <siprintf>:
 80052fc:	b40e      	push	{r1, r2, r3}
 80052fe:	b510      	push	{r4, lr}
 8005300:	b09d      	sub	sp, #116	@ 0x74
 8005302:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005304:	9002      	str	r0, [sp, #8]
 8005306:	9006      	str	r0, [sp, #24]
 8005308:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800530c:	480a      	ldr	r0, [pc, #40]	@ (8005338 <siprintf+0x3c>)
 800530e:	9107      	str	r1, [sp, #28]
 8005310:	9104      	str	r1, [sp, #16]
 8005312:	490a      	ldr	r1, [pc, #40]	@ (800533c <siprintf+0x40>)
 8005314:	f853 2b04 	ldr.w	r2, [r3], #4
 8005318:	9105      	str	r1, [sp, #20]
 800531a:	2400      	movs	r4, #0
 800531c:	a902      	add	r1, sp, #8
 800531e:	6800      	ldr	r0, [r0, #0]
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005324:	f000 f994 	bl	8005650 <_svfiprintf_r>
 8005328:	9b02      	ldr	r3, [sp, #8]
 800532a:	701c      	strb	r4, [r3, #0]
 800532c:	b01d      	add	sp, #116	@ 0x74
 800532e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005332:	b003      	add	sp, #12
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	2000000c 	.word	0x2000000c
 800533c:	ffff0208 	.word	0xffff0208

08005340 <memset>:
 8005340:	4402      	add	r2, r0
 8005342:	4603      	mov	r3, r0
 8005344:	4293      	cmp	r3, r2
 8005346:	d100      	bne.n	800534a <memset+0xa>
 8005348:	4770      	bx	lr
 800534a:	f803 1b01 	strb.w	r1, [r3], #1
 800534e:	e7f9      	b.n	8005344 <memset+0x4>

08005350 <__errno>:
 8005350:	4b01      	ldr	r3, [pc, #4]	@ (8005358 <__errno+0x8>)
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	2000000c 	.word	0x2000000c

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4d0d      	ldr	r5, [pc, #52]	@ (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	@ (8005398 <__libc_init_array+0x3c>)
 8005362:	1b64      	subs	r4, r4, r5
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2600      	movs	r6, #0
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4d0b      	ldr	r5, [pc, #44]	@ (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	@ (80053a0 <__libc_init_array+0x44>)
 8005370:	f000 fc64 	bl	8005c3c <_init>
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2600      	movs	r6, #0
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f855 3b04 	ldr.w	r3, [r5], #4
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f855 3b04 	ldr.w	r3, [r5], #4
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	08005e78 	.word	0x08005e78
 8005398:	08005e78 	.word	0x08005e78
 800539c:	08005e78 	.word	0x08005e78
 80053a0:	08005e7c 	.word	0x08005e7c

080053a4 <__retarget_lock_acquire_recursive>:
 80053a4:	4770      	bx	lr

080053a6 <__retarget_lock_release_recursive>:
 80053a6:	4770      	bx	lr

080053a8 <_free_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4605      	mov	r5, r0
 80053ac:	2900      	cmp	r1, #0
 80053ae:	d041      	beq.n	8005434 <_free_r+0x8c>
 80053b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b4:	1f0c      	subs	r4, r1, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bfb8      	it	lt
 80053ba:	18e4      	addlt	r4, r4, r3
 80053bc:	f000 f8e0 	bl	8005580 <__malloc_lock>
 80053c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005438 <_free_r+0x90>)
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	b933      	cbnz	r3, 80053d4 <_free_r+0x2c>
 80053c6:	6063      	str	r3, [r4, #4]
 80053c8:	6014      	str	r4, [r2, #0]
 80053ca:	4628      	mov	r0, r5
 80053cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d0:	f000 b8dc 	b.w	800558c <__malloc_unlock>
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d908      	bls.n	80053ea <_free_r+0x42>
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	1821      	adds	r1, r4, r0
 80053dc:	428b      	cmp	r3, r1
 80053de:	bf01      	itttt	eq
 80053e0:	6819      	ldreq	r1, [r3, #0]
 80053e2:	685b      	ldreq	r3, [r3, #4]
 80053e4:	1809      	addeq	r1, r1, r0
 80053e6:	6021      	streq	r1, [r4, #0]
 80053e8:	e7ed      	b.n	80053c6 <_free_r+0x1e>
 80053ea:	461a      	mov	r2, r3
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	b10b      	cbz	r3, 80053f4 <_free_r+0x4c>
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d9fa      	bls.n	80053ea <_free_r+0x42>
 80053f4:	6811      	ldr	r1, [r2, #0]
 80053f6:	1850      	adds	r0, r2, r1
 80053f8:	42a0      	cmp	r0, r4
 80053fa:	d10b      	bne.n	8005414 <_free_r+0x6c>
 80053fc:	6820      	ldr	r0, [r4, #0]
 80053fe:	4401      	add	r1, r0
 8005400:	1850      	adds	r0, r2, r1
 8005402:	4283      	cmp	r3, r0
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	d1e0      	bne.n	80053ca <_free_r+0x22>
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	6053      	str	r3, [r2, #4]
 800540e:	4408      	add	r0, r1
 8005410:	6010      	str	r0, [r2, #0]
 8005412:	e7da      	b.n	80053ca <_free_r+0x22>
 8005414:	d902      	bls.n	800541c <_free_r+0x74>
 8005416:	230c      	movs	r3, #12
 8005418:	602b      	str	r3, [r5, #0]
 800541a:	e7d6      	b.n	80053ca <_free_r+0x22>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	1821      	adds	r1, r4, r0
 8005420:	428b      	cmp	r3, r1
 8005422:	bf04      	itt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	bf04      	itt	eq
 800542c:	1809      	addeq	r1, r1, r0
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	6054      	str	r4, [r2, #4]
 8005432:	e7ca      	b.n	80053ca <_free_r+0x22>
 8005434:	bd38      	pop	{r3, r4, r5, pc}
 8005436:	bf00      	nop
 8005438:	200003a4 	.word	0x200003a4

0800543c <sbrk_aligned>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	4e0f      	ldr	r6, [pc, #60]	@ (800547c <sbrk_aligned+0x40>)
 8005440:	460c      	mov	r4, r1
 8005442:	6831      	ldr	r1, [r6, #0]
 8005444:	4605      	mov	r5, r0
 8005446:	b911      	cbnz	r1, 800544e <sbrk_aligned+0x12>
 8005448:	f000 fba4 	bl	8005b94 <_sbrk_r>
 800544c:	6030      	str	r0, [r6, #0]
 800544e:	4621      	mov	r1, r4
 8005450:	4628      	mov	r0, r5
 8005452:	f000 fb9f 	bl	8005b94 <_sbrk_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	d103      	bne.n	8005462 <sbrk_aligned+0x26>
 800545a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800545e:	4620      	mov	r0, r4
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	1cc4      	adds	r4, r0, #3
 8005464:	f024 0403 	bic.w	r4, r4, #3
 8005468:	42a0      	cmp	r0, r4
 800546a:	d0f8      	beq.n	800545e <sbrk_aligned+0x22>
 800546c:	1a21      	subs	r1, r4, r0
 800546e:	4628      	mov	r0, r5
 8005470:	f000 fb90 	bl	8005b94 <_sbrk_r>
 8005474:	3001      	adds	r0, #1
 8005476:	d1f2      	bne.n	800545e <sbrk_aligned+0x22>
 8005478:	e7ef      	b.n	800545a <sbrk_aligned+0x1e>
 800547a:	bf00      	nop
 800547c:	200003a0 	.word	0x200003a0

08005480 <_malloc_r>:
 8005480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005484:	1ccd      	adds	r5, r1, #3
 8005486:	f025 0503 	bic.w	r5, r5, #3
 800548a:	3508      	adds	r5, #8
 800548c:	2d0c      	cmp	r5, #12
 800548e:	bf38      	it	cc
 8005490:	250c      	movcc	r5, #12
 8005492:	2d00      	cmp	r5, #0
 8005494:	4606      	mov	r6, r0
 8005496:	db01      	blt.n	800549c <_malloc_r+0x1c>
 8005498:	42a9      	cmp	r1, r5
 800549a:	d904      	bls.n	80054a6 <_malloc_r+0x26>
 800549c:	230c      	movs	r3, #12
 800549e:	6033      	str	r3, [r6, #0]
 80054a0:	2000      	movs	r0, #0
 80054a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800557c <_malloc_r+0xfc>
 80054aa:	f000 f869 	bl	8005580 <__malloc_lock>
 80054ae:	f8d8 3000 	ldr.w	r3, [r8]
 80054b2:	461c      	mov	r4, r3
 80054b4:	bb44      	cbnz	r4, 8005508 <_malloc_r+0x88>
 80054b6:	4629      	mov	r1, r5
 80054b8:	4630      	mov	r0, r6
 80054ba:	f7ff ffbf 	bl	800543c <sbrk_aligned>
 80054be:	1c43      	adds	r3, r0, #1
 80054c0:	4604      	mov	r4, r0
 80054c2:	d158      	bne.n	8005576 <_malloc_r+0xf6>
 80054c4:	f8d8 4000 	ldr.w	r4, [r8]
 80054c8:	4627      	mov	r7, r4
 80054ca:	2f00      	cmp	r7, #0
 80054cc:	d143      	bne.n	8005556 <_malloc_r+0xd6>
 80054ce:	2c00      	cmp	r4, #0
 80054d0:	d04b      	beq.n	800556a <_malloc_r+0xea>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	4639      	mov	r1, r7
 80054d6:	4630      	mov	r0, r6
 80054d8:	eb04 0903 	add.w	r9, r4, r3
 80054dc:	f000 fb5a 	bl	8005b94 <_sbrk_r>
 80054e0:	4581      	cmp	r9, r0
 80054e2:	d142      	bne.n	800556a <_malloc_r+0xea>
 80054e4:	6821      	ldr	r1, [r4, #0]
 80054e6:	1a6d      	subs	r5, r5, r1
 80054e8:	4629      	mov	r1, r5
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7ff ffa6 	bl	800543c <sbrk_aligned>
 80054f0:	3001      	adds	r0, #1
 80054f2:	d03a      	beq.n	800556a <_malloc_r+0xea>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	442b      	add	r3, r5
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	f8d8 3000 	ldr.w	r3, [r8]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	bb62      	cbnz	r2, 800555c <_malloc_r+0xdc>
 8005502:	f8c8 7000 	str.w	r7, [r8]
 8005506:	e00f      	b.n	8005528 <_malloc_r+0xa8>
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	1b52      	subs	r2, r2, r5
 800550c:	d420      	bmi.n	8005550 <_malloc_r+0xd0>
 800550e:	2a0b      	cmp	r2, #11
 8005510:	d917      	bls.n	8005542 <_malloc_r+0xc2>
 8005512:	1961      	adds	r1, r4, r5
 8005514:	42a3      	cmp	r3, r4
 8005516:	6025      	str	r5, [r4, #0]
 8005518:	bf18      	it	ne
 800551a:	6059      	strne	r1, [r3, #4]
 800551c:	6863      	ldr	r3, [r4, #4]
 800551e:	bf08      	it	eq
 8005520:	f8c8 1000 	streq.w	r1, [r8]
 8005524:	5162      	str	r2, [r4, r5]
 8005526:	604b      	str	r3, [r1, #4]
 8005528:	4630      	mov	r0, r6
 800552a:	f000 f82f 	bl	800558c <__malloc_unlock>
 800552e:	f104 000b 	add.w	r0, r4, #11
 8005532:	1d23      	adds	r3, r4, #4
 8005534:	f020 0007 	bic.w	r0, r0, #7
 8005538:	1ac2      	subs	r2, r0, r3
 800553a:	bf1c      	itt	ne
 800553c:	1a1b      	subne	r3, r3, r0
 800553e:	50a3      	strne	r3, [r4, r2]
 8005540:	e7af      	b.n	80054a2 <_malloc_r+0x22>
 8005542:	6862      	ldr	r2, [r4, #4]
 8005544:	42a3      	cmp	r3, r4
 8005546:	bf0c      	ite	eq
 8005548:	f8c8 2000 	streq.w	r2, [r8]
 800554c:	605a      	strne	r2, [r3, #4]
 800554e:	e7eb      	b.n	8005528 <_malloc_r+0xa8>
 8005550:	4623      	mov	r3, r4
 8005552:	6864      	ldr	r4, [r4, #4]
 8005554:	e7ae      	b.n	80054b4 <_malloc_r+0x34>
 8005556:	463c      	mov	r4, r7
 8005558:	687f      	ldr	r7, [r7, #4]
 800555a:	e7b6      	b.n	80054ca <_malloc_r+0x4a>
 800555c:	461a      	mov	r2, r3
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	42a3      	cmp	r3, r4
 8005562:	d1fb      	bne.n	800555c <_malloc_r+0xdc>
 8005564:	2300      	movs	r3, #0
 8005566:	6053      	str	r3, [r2, #4]
 8005568:	e7de      	b.n	8005528 <_malloc_r+0xa8>
 800556a:	230c      	movs	r3, #12
 800556c:	6033      	str	r3, [r6, #0]
 800556e:	4630      	mov	r0, r6
 8005570:	f000 f80c 	bl	800558c <__malloc_unlock>
 8005574:	e794      	b.n	80054a0 <_malloc_r+0x20>
 8005576:	6005      	str	r5, [r0, #0]
 8005578:	e7d6      	b.n	8005528 <_malloc_r+0xa8>
 800557a:	bf00      	nop
 800557c:	200003a4 	.word	0x200003a4

08005580 <__malloc_lock>:
 8005580:	4801      	ldr	r0, [pc, #4]	@ (8005588 <__malloc_lock+0x8>)
 8005582:	f7ff bf0f 	b.w	80053a4 <__retarget_lock_acquire_recursive>
 8005586:	bf00      	nop
 8005588:	2000039c 	.word	0x2000039c

0800558c <__malloc_unlock>:
 800558c:	4801      	ldr	r0, [pc, #4]	@ (8005594 <__malloc_unlock+0x8>)
 800558e:	f7ff bf0a 	b.w	80053a6 <__retarget_lock_release_recursive>
 8005592:	bf00      	nop
 8005594:	2000039c 	.word	0x2000039c

08005598 <__ssputs_r>:
 8005598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	688e      	ldr	r6, [r1, #8]
 800559e:	461f      	mov	r7, r3
 80055a0:	42be      	cmp	r6, r7
 80055a2:	680b      	ldr	r3, [r1, #0]
 80055a4:	4682      	mov	sl, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	4690      	mov	r8, r2
 80055aa:	d82d      	bhi.n	8005608 <__ssputs_r+0x70>
 80055ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055b4:	d026      	beq.n	8005604 <__ssputs_r+0x6c>
 80055b6:	6965      	ldr	r5, [r4, #20]
 80055b8:	6909      	ldr	r1, [r1, #16]
 80055ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055be:	eba3 0901 	sub.w	r9, r3, r1
 80055c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055c6:	1c7b      	adds	r3, r7, #1
 80055c8:	444b      	add	r3, r9
 80055ca:	106d      	asrs	r5, r5, #1
 80055cc:	429d      	cmp	r5, r3
 80055ce:	bf38      	it	cc
 80055d0:	461d      	movcc	r5, r3
 80055d2:	0553      	lsls	r3, r2, #21
 80055d4:	d527      	bpl.n	8005626 <__ssputs_r+0x8e>
 80055d6:	4629      	mov	r1, r5
 80055d8:	f7ff ff52 	bl	8005480 <_malloc_r>
 80055dc:	4606      	mov	r6, r0
 80055de:	b360      	cbz	r0, 800563a <__ssputs_r+0xa2>
 80055e0:	6921      	ldr	r1, [r4, #16]
 80055e2:	464a      	mov	r2, r9
 80055e4:	f000 fae6 	bl	8005bb4 <memcpy>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	6126      	str	r6, [r4, #16]
 80055f6:	6165      	str	r5, [r4, #20]
 80055f8:	444e      	add	r6, r9
 80055fa:	eba5 0509 	sub.w	r5, r5, r9
 80055fe:	6026      	str	r6, [r4, #0]
 8005600:	60a5      	str	r5, [r4, #8]
 8005602:	463e      	mov	r6, r7
 8005604:	42be      	cmp	r6, r7
 8005606:	d900      	bls.n	800560a <__ssputs_r+0x72>
 8005608:	463e      	mov	r6, r7
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	4632      	mov	r2, r6
 800560e:	4641      	mov	r1, r8
 8005610:	f000 faa6 	bl	8005b60 <memmove>
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	1b9b      	subs	r3, r3, r6
 8005618:	60a3      	str	r3, [r4, #8]
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	4433      	add	r3, r6
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	2000      	movs	r0, #0
 8005622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005626:	462a      	mov	r2, r5
 8005628:	f000 fad2 	bl	8005bd0 <_realloc_r>
 800562c:	4606      	mov	r6, r0
 800562e:	2800      	cmp	r0, #0
 8005630:	d1e0      	bne.n	80055f4 <__ssputs_r+0x5c>
 8005632:	6921      	ldr	r1, [r4, #16]
 8005634:	4650      	mov	r0, sl
 8005636:	f7ff feb7 	bl	80053a8 <_free_r>
 800563a:	230c      	movs	r3, #12
 800563c:	f8ca 3000 	str.w	r3, [sl]
 8005640:	89a3      	ldrh	r3, [r4, #12]
 8005642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005646:	81a3      	strh	r3, [r4, #12]
 8005648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800564c:	e7e9      	b.n	8005622 <__ssputs_r+0x8a>
	...

08005650 <_svfiprintf_r>:
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	4698      	mov	r8, r3
 8005656:	898b      	ldrh	r3, [r1, #12]
 8005658:	061b      	lsls	r3, r3, #24
 800565a:	b09d      	sub	sp, #116	@ 0x74
 800565c:	4607      	mov	r7, r0
 800565e:	460d      	mov	r5, r1
 8005660:	4614      	mov	r4, r2
 8005662:	d510      	bpl.n	8005686 <_svfiprintf_r+0x36>
 8005664:	690b      	ldr	r3, [r1, #16]
 8005666:	b973      	cbnz	r3, 8005686 <_svfiprintf_r+0x36>
 8005668:	2140      	movs	r1, #64	@ 0x40
 800566a:	f7ff ff09 	bl	8005480 <_malloc_r>
 800566e:	6028      	str	r0, [r5, #0]
 8005670:	6128      	str	r0, [r5, #16]
 8005672:	b930      	cbnz	r0, 8005682 <_svfiprintf_r+0x32>
 8005674:	230c      	movs	r3, #12
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800567c:	b01d      	add	sp, #116	@ 0x74
 800567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	2340      	movs	r3, #64	@ 0x40
 8005684:	616b      	str	r3, [r5, #20]
 8005686:	2300      	movs	r3, #0
 8005688:	9309      	str	r3, [sp, #36]	@ 0x24
 800568a:	2320      	movs	r3, #32
 800568c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005690:	f8cd 800c 	str.w	r8, [sp, #12]
 8005694:	2330      	movs	r3, #48	@ 0x30
 8005696:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005834 <_svfiprintf_r+0x1e4>
 800569a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800569e:	f04f 0901 	mov.w	r9, #1
 80056a2:	4623      	mov	r3, r4
 80056a4:	469a      	mov	sl, r3
 80056a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056aa:	b10a      	cbz	r2, 80056b0 <_svfiprintf_r+0x60>
 80056ac:	2a25      	cmp	r2, #37	@ 0x25
 80056ae:	d1f9      	bne.n	80056a4 <_svfiprintf_r+0x54>
 80056b0:	ebba 0b04 	subs.w	fp, sl, r4
 80056b4:	d00b      	beq.n	80056ce <_svfiprintf_r+0x7e>
 80056b6:	465b      	mov	r3, fp
 80056b8:	4622      	mov	r2, r4
 80056ba:	4629      	mov	r1, r5
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff ff6b 	bl	8005598 <__ssputs_r>
 80056c2:	3001      	adds	r0, #1
 80056c4:	f000 80a7 	beq.w	8005816 <_svfiprintf_r+0x1c6>
 80056c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ca:	445a      	add	r2, fp
 80056cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80056ce:	f89a 3000 	ldrb.w	r3, [sl]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 809f 	beq.w	8005816 <_svfiprintf_r+0x1c6>
 80056d8:	2300      	movs	r3, #0
 80056da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056e2:	f10a 0a01 	add.w	sl, sl, #1
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	9307      	str	r3, [sp, #28]
 80056ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80056f0:	4654      	mov	r4, sl
 80056f2:	2205      	movs	r2, #5
 80056f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f8:	484e      	ldr	r0, [pc, #312]	@ (8005834 <_svfiprintf_r+0x1e4>)
 80056fa:	f7fa fd79 	bl	80001f0 <memchr>
 80056fe:	9a04      	ldr	r2, [sp, #16]
 8005700:	b9d8      	cbnz	r0, 800573a <_svfiprintf_r+0xea>
 8005702:	06d0      	lsls	r0, r2, #27
 8005704:	bf44      	itt	mi
 8005706:	2320      	movmi	r3, #32
 8005708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800570c:	0711      	lsls	r1, r2, #28
 800570e:	bf44      	itt	mi
 8005710:	232b      	movmi	r3, #43	@ 0x2b
 8005712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005716:	f89a 3000 	ldrb.w	r3, [sl]
 800571a:	2b2a      	cmp	r3, #42	@ 0x2a
 800571c:	d015      	beq.n	800574a <_svfiprintf_r+0xfa>
 800571e:	9a07      	ldr	r2, [sp, #28]
 8005720:	4654      	mov	r4, sl
 8005722:	2000      	movs	r0, #0
 8005724:	f04f 0c0a 	mov.w	ip, #10
 8005728:	4621      	mov	r1, r4
 800572a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800572e:	3b30      	subs	r3, #48	@ 0x30
 8005730:	2b09      	cmp	r3, #9
 8005732:	d94b      	bls.n	80057cc <_svfiprintf_r+0x17c>
 8005734:	b1b0      	cbz	r0, 8005764 <_svfiprintf_r+0x114>
 8005736:	9207      	str	r2, [sp, #28]
 8005738:	e014      	b.n	8005764 <_svfiprintf_r+0x114>
 800573a:	eba0 0308 	sub.w	r3, r0, r8
 800573e:	fa09 f303 	lsl.w	r3, r9, r3
 8005742:	4313      	orrs	r3, r2
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	46a2      	mov	sl, r4
 8005748:	e7d2      	b.n	80056f0 <_svfiprintf_r+0xa0>
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	1d19      	adds	r1, r3, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	9103      	str	r1, [sp, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	bfbb      	ittet	lt
 8005756:	425b      	neglt	r3, r3
 8005758:	f042 0202 	orrlt.w	r2, r2, #2
 800575c:	9307      	strge	r3, [sp, #28]
 800575e:	9307      	strlt	r3, [sp, #28]
 8005760:	bfb8      	it	lt
 8005762:	9204      	strlt	r2, [sp, #16]
 8005764:	7823      	ldrb	r3, [r4, #0]
 8005766:	2b2e      	cmp	r3, #46	@ 0x2e
 8005768:	d10a      	bne.n	8005780 <_svfiprintf_r+0x130>
 800576a:	7863      	ldrb	r3, [r4, #1]
 800576c:	2b2a      	cmp	r3, #42	@ 0x2a
 800576e:	d132      	bne.n	80057d6 <_svfiprintf_r+0x186>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	9203      	str	r2, [sp, #12]
 8005778:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800577c:	3402      	adds	r4, #2
 800577e:	9305      	str	r3, [sp, #20]
 8005780:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005844 <_svfiprintf_r+0x1f4>
 8005784:	7821      	ldrb	r1, [r4, #0]
 8005786:	2203      	movs	r2, #3
 8005788:	4650      	mov	r0, sl
 800578a:	f7fa fd31 	bl	80001f0 <memchr>
 800578e:	b138      	cbz	r0, 80057a0 <_svfiprintf_r+0x150>
 8005790:	9b04      	ldr	r3, [sp, #16]
 8005792:	eba0 000a 	sub.w	r0, r0, sl
 8005796:	2240      	movs	r2, #64	@ 0x40
 8005798:	4082      	lsls	r2, r0
 800579a:	4313      	orrs	r3, r2
 800579c:	3401      	adds	r4, #1
 800579e:	9304      	str	r3, [sp, #16]
 80057a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a4:	4824      	ldr	r0, [pc, #144]	@ (8005838 <_svfiprintf_r+0x1e8>)
 80057a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057aa:	2206      	movs	r2, #6
 80057ac:	f7fa fd20 	bl	80001f0 <memchr>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d036      	beq.n	8005822 <_svfiprintf_r+0x1d2>
 80057b4:	4b21      	ldr	r3, [pc, #132]	@ (800583c <_svfiprintf_r+0x1ec>)
 80057b6:	bb1b      	cbnz	r3, 8005800 <_svfiprintf_r+0x1b0>
 80057b8:	9b03      	ldr	r3, [sp, #12]
 80057ba:	3307      	adds	r3, #7
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	3308      	adds	r3, #8
 80057c2:	9303      	str	r3, [sp, #12]
 80057c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c6:	4433      	add	r3, r6
 80057c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ca:	e76a      	b.n	80056a2 <_svfiprintf_r+0x52>
 80057cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80057d0:	460c      	mov	r4, r1
 80057d2:	2001      	movs	r0, #1
 80057d4:	e7a8      	b.n	8005728 <_svfiprintf_r+0xd8>
 80057d6:	2300      	movs	r3, #0
 80057d8:	3401      	adds	r4, #1
 80057da:	9305      	str	r3, [sp, #20]
 80057dc:	4619      	mov	r1, r3
 80057de:	f04f 0c0a 	mov.w	ip, #10
 80057e2:	4620      	mov	r0, r4
 80057e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e8:	3a30      	subs	r2, #48	@ 0x30
 80057ea:	2a09      	cmp	r2, #9
 80057ec:	d903      	bls.n	80057f6 <_svfiprintf_r+0x1a6>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0c6      	beq.n	8005780 <_svfiprintf_r+0x130>
 80057f2:	9105      	str	r1, [sp, #20]
 80057f4:	e7c4      	b.n	8005780 <_svfiprintf_r+0x130>
 80057f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057fa:	4604      	mov	r4, r0
 80057fc:	2301      	movs	r3, #1
 80057fe:	e7f0      	b.n	80057e2 <_svfiprintf_r+0x192>
 8005800:	ab03      	add	r3, sp, #12
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	462a      	mov	r2, r5
 8005806:	4b0e      	ldr	r3, [pc, #56]	@ (8005840 <_svfiprintf_r+0x1f0>)
 8005808:	a904      	add	r1, sp, #16
 800580a:	4638      	mov	r0, r7
 800580c:	f3af 8000 	nop.w
 8005810:	1c42      	adds	r2, r0, #1
 8005812:	4606      	mov	r6, r0
 8005814:	d1d6      	bne.n	80057c4 <_svfiprintf_r+0x174>
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	065b      	lsls	r3, r3, #25
 800581a:	f53f af2d 	bmi.w	8005678 <_svfiprintf_r+0x28>
 800581e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005820:	e72c      	b.n	800567c <_svfiprintf_r+0x2c>
 8005822:	ab03      	add	r3, sp, #12
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	462a      	mov	r2, r5
 8005828:	4b05      	ldr	r3, [pc, #20]	@ (8005840 <_svfiprintf_r+0x1f0>)
 800582a:	a904      	add	r1, sp, #16
 800582c:	4638      	mov	r0, r7
 800582e:	f000 f879 	bl	8005924 <_printf_i>
 8005832:	e7ed      	b.n	8005810 <_svfiprintf_r+0x1c0>
 8005834:	08005e3c 	.word	0x08005e3c
 8005838:	08005e46 	.word	0x08005e46
 800583c:	00000000 	.word	0x00000000
 8005840:	08005599 	.word	0x08005599
 8005844:	08005e42 	.word	0x08005e42

08005848 <_printf_common>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	4616      	mov	r6, r2
 800584e:	4698      	mov	r8, r3
 8005850:	688a      	ldr	r2, [r1, #8]
 8005852:	690b      	ldr	r3, [r1, #16]
 8005854:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005858:	4293      	cmp	r3, r2
 800585a:	bfb8      	it	lt
 800585c:	4613      	movlt	r3, r2
 800585e:	6033      	str	r3, [r6, #0]
 8005860:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005864:	4607      	mov	r7, r0
 8005866:	460c      	mov	r4, r1
 8005868:	b10a      	cbz	r2, 800586e <_printf_common+0x26>
 800586a:	3301      	adds	r3, #1
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	0699      	lsls	r1, r3, #26
 8005872:	bf42      	ittt	mi
 8005874:	6833      	ldrmi	r3, [r6, #0]
 8005876:	3302      	addmi	r3, #2
 8005878:	6033      	strmi	r3, [r6, #0]
 800587a:	6825      	ldr	r5, [r4, #0]
 800587c:	f015 0506 	ands.w	r5, r5, #6
 8005880:	d106      	bne.n	8005890 <_printf_common+0x48>
 8005882:	f104 0a19 	add.w	sl, r4, #25
 8005886:	68e3      	ldr	r3, [r4, #12]
 8005888:	6832      	ldr	r2, [r6, #0]
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	42ab      	cmp	r3, r5
 800588e:	dc26      	bgt.n	80058de <_printf_common+0x96>
 8005890:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005894:	6822      	ldr	r2, [r4, #0]
 8005896:	3b00      	subs	r3, #0
 8005898:	bf18      	it	ne
 800589a:	2301      	movne	r3, #1
 800589c:	0692      	lsls	r2, r2, #26
 800589e:	d42b      	bmi.n	80058f8 <_printf_common+0xb0>
 80058a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058a4:	4641      	mov	r1, r8
 80058a6:	4638      	mov	r0, r7
 80058a8:	47c8      	blx	r9
 80058aa:	3001      	adds	r0, #1
 80058ac:	d01e      	beq.n	80058ec <_printf_common+0xa4>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	6922      	ldr	r2, [r4, #16]
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	bf02      	ittt	eq
 80058ba:	68e5      	ldreq	r5, [r4, #12]
 80058bc:	6833      	ldreq	r3, [r6, #0]
 80058be:	1aed      	subeq	r5, r5, r3
 80058c0:	68a3      	ldr	r3, [r4, #8]
 80058c2:	bf0c      	ite	eq
 80058c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c8:	2500      	movne	r5, #0
 80058ca:	4293      	cmp	r3, r2
 80058cc:	bfc4      	itt	gt
 80058ce:	1a9b      	subgt	r3, r3, r2
 80058d0:	18ed      	addgt	r5, r5, r3
 80058d2:	2600      	movs	r6, #0
 80058d4:	341a      	adds	r4, #26
 80058d6:	42b5      	cmp	r5, r6
 80058d8:	d11a      	bne.n	8005910 <_printf_common+0xc8>
 80058da:	2000      	movs	r0, #0
 80058dc:	e008      	b.n	80058f0 <_printf_common+0xa8>
 80058de:	2301      	movs	r3, #1
 80058e0:	4652      	mov	r2, sl
 80058e2:	4641      	mov	r1, r8
 80058e4:	4638      	mov	r0, r7
 80058e6:	47c8      	blx	r9
 80058e8:	3001      	adds	r0, #1
 80058ea:	d103      	bne.n	80058f4 <_printf_common+0xac>
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f4:	3501      	adds	r5, #1
 80058f6:	e7c6      	b.n	8005886 <_printf_common+0x3e>
 80058f8:	18e1      	adds	r1, r4, r3
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	2030      	movs	r0, #48	@ 0x30
 80058fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005902:	4422      	add	r2, r4
 8005904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800590c:	3302      	adds	r3, #2
 800590e:	e7c7      	b.n	80058a0 <_printf_common+0x58>
 8005910:	2301      	movs	r3, #1
 8005912:	4622      	mov	r2, r4
 8005914:	4641      	mov	r1, r8
 8005916:	4638      	mov	r0, r7
 8005918:	47c8      	blx	r9
 800591a:	3001      	adds	r0, #1
 800591c:	d0e6      	beq.n	80058ec <_printf_common+0xa4>
 800591e:	3601      	adds	r6, #1
 8005920:	e7d9      	b.n	80058d6 <_printf_common+0x8e>
	...

08005924 <_printf_i>:
 8005924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	7e0f      	ldrb	r7, [r1, #24]
 800592a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800592c:	2f78      	cmp	r7, #120	@ 0x78
 800592e:	4691      	mov	r9, r2
 8005930:	4680      	mov	r8, r0
 8005932:	460c      	mov	r4, r1
 8005934:	469a      	mov	sl, r3
 8005936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800593a:	d807      	bhi.n	800594c <_printf_i+0x28>
 800593c:	2f62      	cmp	r7, #98	@ 0x62
 800593e:	d80a      	bhi.n	8005956 <_printf_i+0x32>
 8005940:	2f00      	cmp	r7, #0
 8005942:	f000 80d1 	beq.w	8005ae8 <_printf_i+0x1c4>
 8005946:	2f58      	cmp	r7, #88	@ 0x58
 8005948:	f000 80b8 	beq.w	8005abc <_printf_i+0x198>
 800594c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005954:	e03a      	b.n	80059cc <_printf_i+0xa8>
 8005956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800595a:	2b15      	cmp	r3, #21
 800595c:	d8f6      	bhi.n	800594c <_printf_i+0x28>
 800595e:	a101      	add	r1, pc, #4	@ (adr r1, 8005964 <_printf_i+0x40>)
 8005960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005964:	080059bd 	.word	0x080059bd
 8005968:	080059d1 	.word	0x080059d1
 800596c:	0800594d 	.word	0x0800594d
 8005970:	0800594d 	.word	0x0800594d
 8005974:	0800594d 	.word	0x0800594d
 8005978:	0800594d 	.word	0x0800594d
 800597c:	080059d1 	.word	0x080059d1
 8005980:	0800594d 	.word	0x0800594d
 8005984:	0800594d 	.word	0x0800594d
 8005988:	0800594d 	.word	0x0800594d
 800598c:	0800594d 	.word	0x0800594d
 8005990:	08005acf 	.word	0x08005acf
 8005994:	080059fb 	.word	0x080059fb
 8005998:	08005a89 	.word	0x08005a89
 800599c:	0800594d 	.word	0x0800594d
 80059a0:	0800594d 	.word	0x0800594d
 80059a4:	08005af1 	.word	0x08005af1
 80059a8:	0800594d 	.word	0x0800594d
 80059ac:	080059fb 	.word	0x080059fb
 80059b0:	0800594d 	.word	0x0800594d
 80059b4:	0800594d 	.word	0x0800594d
 80059b8:	08005a91 	.word	0x08005a91
 80059bc:	6833      	ldr	r3, [r6, #0]
 80059be:	1d1a      	adds	r2, r3, #4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6032      	str	r2, [r6, #0]
 80059c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059cc:	2301      	movs	r3, #1
 80059ce:	e09c      	b.n	8005b0a <_printf_i+0x1e6>
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	1d19      	adds	r1, r3, #4
 80059d6:	6031      	str	r1, [r6, #0]
 80059d8:	0606      	lsls	r6, r0, #24
 80059da:	d501      	bpl.n	80059e0 <_printf_i+0xbc>
 80059dc:	681d      	ldr	r5, [r3, #0]
 80059de:	e003      	b.n	80059e8 <_printf_i+0xc4>
 80059e0:	0645      	lsls	r5, r0, #25
 80059e2:	d5fb      	bpl.n	80059dc <_printf_i+0xb8>
 80059e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059e8:	2d00      	cmp	r5, #0
 80059ea:	da03      	bge.n	80059f4 <_printf_i+0xd0>
 80059ec:	232d      	movs	r3, #45	@ 0x2d
 80059ee:	426d      	negs	r5, r5
 80059f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f4:	4858      	ldr	r0, [pc, #352]	@ (8005b58 <_printf_i+0x234>)
 80059f6:	230a      	movs	r3, #10
 80059f8:	e011      	b.n	8005a1e <_printf_i+0xfa>
 80059fa:	6821      	ldr	r1, [r4, #0]
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	0608      	lsls	r0, r1, #24
 8005a00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a04:	d402      	bmi.n	8005a0c <_printf_i+0xe8>
 8005a06:	0649      	lsls	r1, r1, #25
 8005a08:	bf48      	it	mi
 8005a0a:	b2ad      	uxthmi	r5, r5
 8005a0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a0e:	4852      	ldr	r0, [pc, #328]	@ (8005b58 <_printf_i+0x234>)
 8005a10:	6033      	str	r3, [r6, #0]
 8005a12:	bf14      	ite	ne
 8005a14:	230a      	movne	r3, #10
 8005a16:	2308      	moveq	r3, #8
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a1e:	6866      	ldr	r6, [r4, #4]
 8005a20:	60a6      	str	r6, [r4, #8]
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	db05      	blt.n	8005a32 <_printf_i+0x10e>
 8005a26:	6821      	ldr	r1, [r4, #0]
 8005a28:	432e      	orrs	r6, r5
 8005a2a:	f021 0104 	bic.w	r1, r1, #4
 8005a2e:	6021      	str	r1, [r4, #0]
 8005a30:	d04b      	beq.n	8005aca <_printf_i+0x1a6>
 8005a32:	4616      	mov	r6, r2
 8005a34:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a38:	fb03 5711 	mls	r7, r3, r1, r5
 8005a3c:	5dc7      	ldrb	r7, [r0, r7]
 8005a3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a42:	462f      	mov	r7, r5
 8005a44:	42bb      	cmp	r3, r7
 8005a46:	460d      	mov	r5, r1
 8005a48:	d9f4      	bls.n	8005a34 <_printf_i+0x110>
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d10b      	bne.n	8005a66 <_printf_i+0x142>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	07df      	lsls	r7, r3, #31
 8005a52:	d508      	bpl.n	8005a66 <_printf_i+0x142>
 8005a54:	6923      	ldr	r3, [r4, #16]
 8005a56:	6861      	ldr	r1, [r4, #4]
 8005a58:	4299      	cmp	r1, r3
 8005a5a:	bfde      	ittt	le
 8005a5c:	2330      	movle	r3, #48	@ 0x30
 8005a5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a62:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005a66:	1b92      	subs	r2, r2, r6
 8005a68:	6122      	str	r2, [r4, #16]
 8005a6a:	f8cd a000 	str.w	sl, [sp]
 8005a6e:	464b      	mov	r3, r9
 8005a70:	aa03      	add	r2, sp, #12
 8005a72:	4621      	mov	r1, r4
 8005a74:	4640      	mov	r0, r8
 8005a76:	f7ff fee7 	bl	8005848 <_printf_common>
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d14a      	bne.n	8005b14 <_printf_i+0x1f0>
 8005a7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a82:	b004      	add	sp, #16
 8005a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	f043 0320 	orr.w	r3, r3, #32
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	4832      	ldr	r0, [pc, #200]	@ (8005b5c <_printf_i+0x238>)
 8005a92:	2778      	movs	r7, #120	@ 0x78
 8005a94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	6831      	ldr	r1, [r6, #0]
 8005a9c:	061f      	lsls	r7, r3, #24
 8005a9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aa2:	d402      	bmi.n	8005aaa <_printf_i+0x186>
 8005aa4:	065f      	lsls	r7, r3, #25
 8005aa6:	bf48      	it	mi
 8005aa8:	b2ad      	uxthmi	r5, r5
 8005aaa:	6031      	str	r1, [r6, #0]
 8005aac:	07d9      	lsls	r1, r3, #31
 8005aae:	bf44      	itt	mi
 8005ab0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab4:	6023      	strmi	r3, [r4, #0]
 8005ab6:	b11d      	cbz	r5, 8005ac0 <_printf_i+0x19c>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	e7ad      	b.n	8005a18 <_printf_i+0xf4>
 8005abc:	4826      	ldr	r0, [pc, #152]	@ (8005b58 <_printf_i+0x234>)
 8005abe:	e7e9      	b.n	8005a94 <_printf_i+0x170>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	f023 0320 	bic.w	r3, r3, #32
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	e7f6      	b.n	8005ab8 <_printf_i+0x194>
 8005aca:	4616      	mov	r6, r2
 8005acc:	e7bd      	b.n	8005a4a <_printf_i+0x126>
 8005ace:	6833      	ldr	r3, [r6, #0]
 8005ad0:	6825      	ldr	r5, [r4, #0]
 8005ad2:	6961      	ldr	r1, [r4, #20]
 8005ad4:	1d18      	adds	r0, r3, #4
 8005ad6:	6030      	str	r0, [r6, #0]
 8005ad8:	062e      	lsls	r6, r5, #24
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	d501      	bpl.n	8005ae2 <_printf_i+0x1be>
 8005ade:	6019      	str	r1, [r3, #0]
 8005ae0:	e002      	b.n	8005ae8 <_printf_i+0x1c4>
 8005ae2:	0668      	lsls	r0, r5, #25
 8005ae4:	d5fb      	bpl.n	8005ade <_printf_i+0x1ba>
 8005ae6:	8019      	strh	r1, [r3, #0]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	6123      	str	r3, [r4, #16]
 8005aec:	4616      	mov	r6, r2
 8005aee:	e7bc      	b.n	8005a6a <_printf_i+0x146>
 8005af0:	6833      	ldr	r3, [r6, #0]
 8005af2:	1d1a      	adds	r2, r3, #4
 8005af4:	6032      	str	r2, [r6, #0]
 8005af6:	681e      	ldr	r6, [r3, #0]
 8005af8:	6862      	ldr	r2, [r4, #4]
 8005afa:	2100      	movs	r1, #0
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7fa fb77 	bl	80001f0 <memchr>
 8005b02:	b108      	cbz	r0, 8005b08 <_printf_i+0x1e4>
 8005b04:	1b80      	subs	r0, r0, r6
 8005b06:	6060      	str	r0, [r4, #4]
 8005b08:	6863      	ldr	r3, [r4, #4]
 8005b0a:	6123      	str	r3, [r4, #16]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b12:	e7aa      	b.n	8005a6a <_printf_i+0x146>
 8005b14:	6923      	ldr	r3, [r4, #16]
 8005b16:	4632      	mov	r2, r6
 8005b18:	4649      	mov	r1, r9
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	47d0      	blx	sl
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d0ad      	beq.n	8005a7e <_printf_i+0x15a>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	079b      	lsls	r3, r3, #30
 8005b26:	d413      	bmi.n	8005b50 <_printf_i+0x22c>
 8005b28:	68e0      	ldr	r0, [r4, #12]
 8005b2a:	9b03      	ldr	r3, [sp, #12]
 8005b2c:	4298      	cmp	r0, r3
 8005b2e:	bfb8      	it	lt
 8005b30:	4618      	movlt	r0, r3
 8005b32:	e7a6      	b.n	8005a82 <_printf_i+0x15e>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4632      	mov	r2, r6
 8005b38:	4649      	mov	r1, r9
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	47d0      	blx	sl
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d09d      	beq.n	8005a7e <_printf_i+0x15a>
 8005b42:	3501      	adds	r5, #1
 8005b44:	68e3      	ldr	r3, [r4, #12]
 8005b46:	9903      	ldr	r1, [sp, #12]
 8005b48:	1a5b      	subs	r3, r3, r1
 8005b4a:	42ab      	cmp	r3, r5
 8005b4c:	dcf2      	bgt.n	8005b34 <_printf_i+0x210>
 8005b4e:	e7eb      	b.n	8005b28 <_printf_i+0x204>
 8005b50:	2500      	movs	r5, #0
 8005b52:	f104 0619 	add.w	r6, r4, #25
 8005b56:	e7f5      	b.n	8005b44 <_printf_i+0x220>
 8005b58:	08005e4d 	.word	0x08005e4d
 8005b5c:	08005e5e 	.word	0x08005e5e

08005b60 <memmove>:
 8005b60:	4288      	cmp	r0, r1
 8005b62:	b510      	push	{r4, lr}
 8005b64:	eb01 0402 	add.w	r4, r1, r2
 8005b68:	d902      	bls.n	8005b70 <memmove+0x10>
 8005b6a:	4284      	cmp	r4, r0
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	d807      	bhi.n	8005b80 <memmove+0x20>
 8005b70:	1e43      	subs	r3, r0, #1
 8005b72:	42a1      	cmp	r1, r4
 8005b74:	d008      	beq.n	8005b88 <memmove+0x28>
 8005b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b7e:	e7f8      	b.n	8005b72 <memmove+0x12>
 8005b80:	4402      	add	r2, r0
 8005b82:	4601      	mov	r1, r0
 8005b84:	428a      	cmp	r2, r1
 8005b86:	d100      	bne.n	8005b8a <memmove+0x2a>
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b92:	e7f7      	b.n	8005b84 <memmove+0x24>

08005b94 <_sbrk_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d06      	ldr	r5, [pc, #24]	@ (8005bb0 <_sbrk_r+0x1c>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	f7fb f86a 	bl	8000c78 <_sbrk>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_sbrk_r+0x1a>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_sbrk_r+0x1a>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	20000398 	.word	0x20000398

08005bb4 <memcpy>:
 8005bb4:	440a      	add	r2, r1
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005bbc:	d100      	bne.n	8005bc0 <memcpy+0xc>
 8005bbe:	4770      	bx	lr
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bca:	4291      	cmp	r1, r2
 8005bcc:	d1f9      	bne.n	8005bc2 <memcpy+0xe>
 8005bce:	bd10      	pop	{r4, pc}

08005bd0 <_realloc_r>:
 8005bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	4614      	mov	r4, r2
 8005bd8:	460d      	mov	r5, r1
 8005bda:	b921      	cbnz	r1, 8005be6 <_realloc_r+0x16>
 8005bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005be0:	4611      	mov	r1, r2
 8005be2:	f7ff bc4d 	b.w	8005480 <_malloc_r>
 8005be6:	b92a      	cbnz	r2, 8005bf4 <_realloc_r+0x24>
 8005be8:	f7ff fbde 	bl	80053a8 <_free_r>
 8005bec:	4625      	mov	r5, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf4:	f000 f81a 	bl	8005c2c <_malloc_usable_size_r>
 8005bf8:	4284      	cmp	r4, r0
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	d802      	bhi.n	8005c04 <_realloc_r+0x34>
 8005bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c02:	d8f4      	bhi.n	8005bee <_realloc_r+0x1e>
 8005c04:	4621      	mov	r1, r4
 8005c06:	4638      	mov	r0, r7
 8005c08:	f7ff fc3a 	bl	8005480 <_malloc_r>
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	b908      	cbnz	r0, 8005c14 <_realloc_r+0x44>
 8005c10:	4645      	mov	r5, r8
 8005c12:	e7ec      	b.n	8005bee <_realloc_r+0x1e>
 8005c14:	42b4      	cmp	r4, r6
 8005c16:	4622      	mov	r2, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	bf28      	it	cs
 8005c1c:	4632      	movcs	r2, r6
 8005c1e:	f7ff ffc9 	bl	8005bb4 <memcpy>
 8005c22:	4629      	mov	r1, r5
 8005c24:	4638      	mov	r0, r7
 8005c26:	f7ff fbbf 	bl	80053a8 <_free_r>
 8005c2a:	e7f1      	b.n	8005c10 <_realloc_r+0x40>

08005c2c <_malloc_usable_size_r>:
 8005c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c30:	1f18      	subs	r0, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bfbc      	itt	lt
 8005c36:	580b      	ldrlt	r3, [r1, r0]
 8005c38:	18c0      	addlt	r0, r0, r3
 8005c3a:	4770      	bx	lr

08005c3c <_init>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	bf00      	nop
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr

08005c48 <_fini>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	bf00      	nop
 8005c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4e:	bc08      	pop	{r3}
 8005c50:	469e      	mov	lr, r3
 8005c52:	4770      	bx	lr
